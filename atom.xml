<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://17603845963.github.io</id>
    <title>井 sir 的私人博客</title>
    <updated>2020-09-03T11:53:30.892Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://17603845963.github.io"/>
    <link rel="self" href="https://17603845963.github.io/atom.xml"/>
    <subtitle>一位秀发茂密的测试工程师</subtitle>
    <logo>https://17603845963.github.io/images/avatar.png</logo>
    <icon>https://17603845963.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 井 sir 的私人博客</rights>
    <entry>
        <title type="html"><![CDATA[Pycharm正式版安装教程]]></title>
        <id>https://17603845963.github.io/post/pycharm-zheng-shi-ban-an-zhuang-jiao-cheng/</id>
        <link href="https://17603845963.github.io/post/pycharm-zheng-shi-ban-an-zhuang-jiao-cheng/">
        </link>
        <updated>2020-09-03T11:53:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="pycharm正式版">Pycharm正式版</h1>
<h2 id="帮你们准备好了网盘链接下载后解压本地任意文件夹">帮你们准备好了网盘链接，下载后解压本地任意文件夹</h2>
<p><strong>链接：https://pan.baidu.com/s/1dp0BJy2QR0bvDMORLi50Sw<br>
提取码：bxkq</strong><br>
<img src="https://img-blog.csdnimg.cn/20200722094409157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<hr>
<h1 id="一-安装-python">一、安装 Python</h1>
<h2 id="1-安装时选择安装界面的-add-python-37-to-path-进行勾选避免再次配置环境变量">1、<strong>安装时选择安装界面的“ Add Python 3.7 to PATH ”进行勾选，避免再次配置环境变量</strong></h2>
<p><strong>32位、64位自行选择</strong><br>
<img src="https://img-blog.csdnimg.cn/20200722093646972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="2-验证python环境配置">2、验证Python环境配置</h2>
<ol>
<li>win +R 输入 cmd ，打开命令行窗口</li>
<li>输入 python 显示版本号即为配置成功<br>
<img src="https://img-blog.csdnimg.cn/20200722170922391.png" alt="在这里插入图片描述" loading="lazy"></li>
</ol>
<hr>
<hr>
<h1 id="二-安装pycharm">二、安装Pycharm</h1>
<h2 id="1-双击解压好的-pycharm-professional-173372788exe-文件进行安装">1、双击解压好的 pycharm-professional-173.3727.88.exe 文件进行安装</h2>
<h2 id="2-将该解压的-jar-文件放到pycharm安装目录的bin目录下">2、将该解压的 .jar 文件放到pycharm安装目录的bin目录下</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200722094538266.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="3-在-bin-目录找到-pycharm64exevmoptions-文件并打开">3、在 bin 目录找到 pycharm64.exe.vmoptions 文件并打开</h2>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200722095844364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="4-在最后一行添加如下内容点击保存两个文件都要修改">4、在最后一行添加如下内容，点击保存【两个文件都要修改】</h2>
<pre><code class="language-python">'''这个是我的安装路径，参考格式替换成自己的'''
-javaagent:D:\Program Files\JetBrains\PyCharm 2017.3\bin\JetbrainsCrack-2.6.10-release-enc.jar
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200722100007968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="5-启动-pycharm-程序">5、启动 pycharm 程序</h2>
<ul>
<li>
<h3 id="pycharm打开help-register">pycharm打开→Help → Register</h3>
<img src="https://img-blog.csdnimg.cn/20200722100335667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">
<ul>
<li>
<h3 id="选择注册码激活粘贴网盘链接的激活完点击确定按钮">选择注册码激活，粘贴网盘链接的激活完，点击确定按钮</h3>
</li>
</ul>
<img src="https://img-blog.csdnimg.cn/20200722100507236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
<li>
<h3 id="点击-help-about-查看破解状态">点击 Help &gt;  About 查看破解状态</h3>
<img src="https://img-blog.csdnimg.cn/202007221009203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
<li>
<h3 id="再次重启pycharm破解完成可以愉快的-printhello-world">再次重启Pycharm，破解完成，可以愉快的 print(&quot;Hello world&quot;)</h3>
<img src="https://img-blog.csdnimg.cn/20200722101141179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python用例和数据的分离处理之DDT数据驱动测试]]></title>
        <id>https://17603845963.github.io/post/python-yong-li-he-shu-ju-de-fen-chi-chu-li-zhi-ddt-shu-ju-qu-dong-ce-shi/</id>
        <link href="https://17603845963.github.io/post/python-yong-li-he-shu-ju-de-fen-chi-chu-li-zhi-ddt-shu-ju-qu-dong-ce-shi/">
        </link>
        <updated>2020-09-03T11:52:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ddt-data-driver-test-数据驱动测试">DDT 【data driver test 数据驱动测试】</h1>
<hr>
<h1 id="一-先安装-ddt-模块">一、先安装 ddt 模块：</h1>
<ul>
<li>
<h3 id="方法一可以直接-cmd-命令行敲-pip-install-ddt-pip行不通试试-pip3-pipexe-安装">方法一：可以直接 cmd 命令行敲： <strong>pip install ddt</strong> 【pip行不通试试 pip3 / pip.exe 安装】</h3>
</li>
<li>
<h3 id="方法二按照下面的gif图片在pycharm直接安装">方法二：按照下面的GIF图片，在pycharm直接安装<img src="https://img-blog.csdnimg.cn/20200801213821214.gif" alt="在这里插入图片描述" loading="lazy"></h3>
</li>
</ul>
<h1 id="二-ddt-简单使用">二、ddt 简单使用</h1>
<ul>
<li>
<h3 id="先导入-ddt-模块-import-ddt">先导入 ddt 模块： import ddt</h3>
</li>
<li>
<h3 id="class类上方输入-ddtddt-装饰器固定语法无需深究">class类上方输入： @ddt.ddt  【装饰器，固定语法，无需深究】</h3>
</li>
<li>
<h3 id="函数方法上方输入-ddtdata">函数方法上方输入： @ddt.data( )</h3>
</li>
<li>
<h3 id="括号传参传几个参数就生成几条测试用例">↑ ↑ ↑ 【括号传参，传几个参数就生成几条测试用例】</h3>
</li>
</ul>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/01
#  @File    : ddt_test.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-
import unittest
# 先导入 ddt 模块
import ddt


# 固定语法，无需深究
@ddt.ddt
class TestMethod(unittest.TestCase):
    # @ddt.data(括号中写参数，有几个参数，就生成多少条测试用例)
    @ddt.data(1,2,3,4)
    # case为形参，用于接收数据
    def test_001(self,case):
        print(&quot;测试用例,第{}条&quot;.format(case))


if __name__ == '__main__':
    unittest.main()
</code></pre>
<h2 id="main方法输入测试结果"><strong>main方法输入测试结果：</strong><img src="https://img-blog.csdnimg.cn/20200801233334667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h2>
<h1 id="三-ddt-在用例中的使用">三、ddt 在用例中的使用</h1>
<h3 id="1-封装一个类方法">1. 封装一个类方法</h3>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/01
#  @File    : D:\PyCharm_Community\DDT\test_login.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-

'''封装一个类方法'''
import requests


class Login():
    def __init__(self,userName,password):
        self.userName = userName
        self.password = password

    def login(self):
        url = 'http://182.92.197.48:8088/api/user/login'
        json = {&quot;userName&quot;: self.userName, &quot;password&quot;: self.password, &quot;remember&quot;: False}
        header = {&quot;user-Agent&quot;: &quot;Mozilla/5.0&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;}
        res = requests.post(url, headers=header, json=json)
        print(res.json())
        return res.json()


Login(&quot;xzsks001&quot;,&quot;123456&quot;).login()
</code></pre>
<h3 id="2-准备变量参数数据-使用-ddt-分离数据">2. 准备变量参数数据 , 使用 ddt 分离数据</h3>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/01
#  @File    : D:\PyCharm_Community\DDT\ddt_test.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-
import unittest
# 导入 ddt 模块
import ddt
from DDT.test_login import Login

data_info = [   {&quot;params&quot;:(&quot;xzsks001&quot;,&quot;123456&quot;),&quot;excepted&quot;:{'code': 1, 'message': '成功'}},
                {&quot;params&quot;:(&quot;xzsks&quot;,&quot;123456&quot;),&quot;excepted&quot;:{'code': 402, 'message': '用户名或密码错误', 'response': None}},
                {&quot;params&quot;:(&quot;zhangsan&quot;,&quot;123&quot;),&quot;excepted&quot;:{'code': 402, 'message': '用户名或密码错误', 'response': None}}]


# 固定语法，无需深究
@ddt.ddt
class TestMethod(unittest.TestCase):
    # @ddt.data(括号中写参数，有几个参数，就生成多少条测试用例)
    @ddt.data(*data_info)
    # case为形参，用于接收数据，dict类型
    def test_001(self,case):
        # 预期结果为 case的excepted的属性值
        excepted = case[&quot;excepted&quot;]
        # 传入参数为 case的params的属性值
        params = case[&quot;params&quot;]
        # 调用被测函数，传入参数，获取实际结果
        result = Login(*params).login()
        # 比对预期与实际结果是否一致
        self.assertEqual(excepted,result)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<h3 id="3执行结果生成测试报告">3.执行结果，生成测试报告</h3>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200802005350164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python之openpyxl操作Excel文件读写]]></title>
        <id>https://17603845963.github.io/post/python-zhi-openpyxl-cao-zuo-excel-wen-jian-du-xie/</id>
        <link href="https://17603845963.github.io/post/python-zhi-openpyxl-cao-zuo-excel-wen-jian-du-xie/">
        </link>
        <updated>2020-09-03T11:52:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-安装-openpyxl-模块">一、安装 Openpyxl 模块</h1>
<h3 id="file-settings-project-interpreter">File &gt; Settings &gt; Project Interpreter<img src="https://img-blog.csdnimg.cn/20200802014708962.gif" alt="在这里插入图片描述" loading="lazy"></h3>
<h1 id="二-桌面生成-excel-文件写入一些数据并复制到pycharm中">二、桌面生成 Excel 文件，写入一些数据并复制到PyCharm中</h1>
<h1 id="注openpyxl-只支持-xlsx-格式的-excel-文件">注：【openpyxl 只支持 .xlsx 格式的 Excel 文件】</h1>
<p><img src="https://img-blog.csdnimg.cn/20200802020203978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200802020833985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200802021515824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="三-pycharm-中使用-openpyxl-读取文件数据">三、pycharm 中使用 openpyxl 读取文件数据</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200802021953456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/02
#  @File    : openpyxl_study.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-
# 导入 openpyxl 模块
import openpyxl

# 1、将指定 excel 文件加载到一个工作簿对象中
wb = openpyxl.load_workbook(&quot;jzq.xlsx&quot;)
# 2、选择文件中的表单【sheet表名】
sheet = wb['login']
# 3、根据行号和列号读取数据【第一行第一列的数据】
res = sheet.cell(row=1,column=1)
# 4、打印取到的数据值
print(res.value)

</code></pre>
<h1 id="四-pycharm-中使用-openpyxl-操作-excel-写入数据">四、pycharm 中使用 openpyxl 操作 Excel 写入数据</h1>
<pre><code class="language-python">
# 导入 openpyxl 模块
import openpyxl

# 1、将指定 excel 文件加载到一个工作簿对象中
wb = openpyxl.load_workbook(&quot;jzq.xlsx&quot;)
# 2、选择文件中的表单【sheet表名】
sheet = wb['login']
# 3、根据行号、列号输入value值
sheet.cell(row=1,column=1,value=&quot;张三&quot;)
# 4、保存为文件
wb.save(&quot;jzq.xlsx&quot;)

</code></pre>
<h4 id="执行后的结果">执行后的结果：</h4>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200802080637115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="如果出现以下报错信息-请注意">如果出现以下报错信息 ，请注意 ：</h4>
<h2 id="在写入数据时文件不可处于打开状态">【在写入数据时，文件不可处于打开状态 ！！！】</h2>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200802080804822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="五-读取文件所有单元格的数据内容">五、读取文件所有单元格的数据内容</h1>
<pre><code class="language-python"># 导入 openpyxl 模块
import openpyxl

'''读取文件所有单元格的数据'''
# 1、将指定 excel 文件加载到一个工作簿对象中
wb = openpyxl.load_workbook(&quot;jzq.xlsx&quot;)
# 2、选择文件中的表单【sheet表名】
sheet = wb['login']
# 3、使用 .rows 方法把所有的表单对象存储在列表中
# type为列表嵌套元组再嵌套单元格
res = list(sheet.rows)
# 遍历每一行的内容
for cases in res :
    # 遍历每一行的所有单元格
    for cells in cases :
        # 获取每个单元格的 value 值
        print(cells.value,end=&quot;   &quot;)
    print()
    
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200802084316329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="六-openpyxl-读取-组装用例数据">六、 Openpyxl 读取、组装用例数据</h1>
<ul>
<li>
<h3 id="新建一个-xlsx-文件">新建一个 .xlsx 文件<img src="https://img-blog.csdnimg.cn/20200802103014477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h3>
</li>
<li>
<h3 id="复制文件至pycharm中并新建一个读取组装数据的-py文件">复制文件至pycharm中，并新建一个读取组装数据的 py文件<img src="https://img-blog.csdnimg.cn/20200802103544364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h3>
</li>
</ul>
<pre><code class="language-python"># 导入 openpyxl 模块
import openpyxl

'''用例数据读取组装成列表嵌套字典的格式'''
# 1、将指定 excel 文件加载到一个工作簿对象中
wb = openpyxl.load_workbook(&quot;jzq_openpyxl.xlsx&quot;)
# 2、选择文件中的表单【sheet表名】
sheet = wb['login']
res = list(sheet.rows)

'''获取第一行的单元格'''
title = []
# 遍历第一行单元格所有数据并添加到列表中
for tag in res[0]:
    title.append(tag.value)
case_data = []
'''遍历除了第一行以外的所有行'''
for row in res[1:]:
    data = []
    # 遍历每一行的所有单元格子
    for c in row:
        # 将每个单元格的 value 值添加列表 res_text 中
        data.append(c.value)
# 使用zip将title和excepted打包成dict属性
    case = dict(zip(title,data))
    case_data.append(case )
print(case_data)

    
</code></pre>
<h1 id="七-提供一个封装好的openpyxl类方法直接调用即可在-excel-表中-读取-写入数据">七、提供一个封装好的openpyxl类方法，直接调用即可在 excel 表中 读取 / 写入数据</h1>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/02
#  @File    : Excel_R&amp;W_demo.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-
import openpyxl

class Excel:
    def __init__(self,workbook_name,sheet_name):
        self.workbook_name = workbook_name
        self.sheet_name = sheet_name

    def read_excel(self):
        # 1、将指定 excel 文件加载到一个工作簿对象中
        wb = openpyxl.load_workbook(self.workbook_name)
        # 2、选择文件中的表单【sheet表名】
        sheet = wb[self.sheet_name]
        res = list(sheet.rows)

        '''获取第一行的单元格'''
        title = []
        # 遍历第一行单元格所有数据并添加到列表中
        for tag in res[0]:
            title.append(tag.value)
        case_data = []
        '''遍历除了第一行以外的所有行'''
        for row in res[1:]:
            data = []
            # 遍历每一行的所有单元格子
            for c in row:
                # 将每个单元格的 value 值添加列表 res_text 中
                data.append(c.value)
                # 使用zip将title和excepted打包成dict属性
            case = dict(zip(title, data))
            case_data.append(case)
        return case_data


    def write_excel(self,row,column,value):
        # 1、将指定 excel 文件加载到一个工作簿对象中
        wb = openpyxl.load_workbook(self.workbook_name)
        # 2、选择文件中的表单【sheet表名】
        sheet = wb[self.sheet_name]
        # 3、根据行号、列号输入value值
        sheet.cell(row=1,column=1,value=&quot;张三&quot;)
        # 4、保存为文件
        wb.save(self.workbook_name)


if __name__ == '__main__':
    excel = Excel(&quot;jzq_openpyxl.xlsx&quot;,&quot;login&quot;)
    res = excel.read_excel()
    print(res)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins环境搭建（Windows下配置流程）]]></title>
        <id>https://17603845963.github.io/post/jenkins-huan-jing-da-jian-windows-xia-pei-zhi-liu-cheng/</id>
        <link href="https://17603845963.github.io/post/jenkins-huan-jing-da-jian-windows-xia-pei-zhi-liu-cheng/">
        </link>
        <updated>2020-09-03T11:50:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="jenkins-是什么">Jenkins 是什么？</h1>
<p><strong>Jenkins是一个用java语言开发的开源的持续集成框架，使开发和运维从繁杂和重复的操作中解脱出来，专注于更为重要的业务逻辑实现上，其主要功能是监视重复工作的执行，有点类似于windows系统中的定时任务，不过Jenkins的功能更加强大，里面集成了很多插件，也可以自己写插件集成进去。Jenkins是开源CI&amp;CD软件领导者， 提供超过1000个插件来支持构建、部署、自动化， 满足任何项目的需要。</strong></p>
<hr>
<h1 id="前置条件需配置jdk环境">前置条件：需配置JDK环境 ！！！</h1>
<ul>
<li>
<h1 id="windows环境下jdk安装操作步骤"><a href="https://blog.csdn.net/weixin_43184774/article/details/106140147">Windows环境下JDK安装操作步骤</a></h1>
</li>
</ul>
<h1 id="windows系统下安装jenkins">windows系统下安装Jenkins</h1>
<ul>
<li>
<h1 id="jenkins安装包下载地址httpswwwjenkinsiozhdownload"><a href="https://www.jenkins.io/zh/download/">jenkins安装包下载地址：https://www.jenkins.io/zh/download/</a></h1>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200803111034315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li>
<h1 id="点击下载后的-msi-文件双击进行安装">点击下载后的 msi 文件，双击进行安装<img src="https://img-blog.csdnimg.cn/20200803094058856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h1>
</li>
<li>
<h1 id="点击-next">点击 Next</h1>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200803094135974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="一张张放图太麻烦了-汇总了一下">一张张放图太麻烦了 汇总了一下</h1>
<p><img src="https://img-blog.csdnimg.cn/20200803122448480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><img src="https://img-blog.csdnimg.cn/20200803122931886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="第九步安装结束后在浏览器输入">第九步安装结束后，在浏览器输入：</h1>
<h1 id="主机ip自定义的端口号1270017878-或者-localhost7878">主机ip+自定义的端口号：127.0.0.1:7878 或者 localhost:7878</h1>
<ul>
<li>
<h1 id="首次登录需要粘贴管理员密码在提示的目录下寻找">★★★★★ 首次登录需要粘贴管理员密码【在提示的目录下寻找】</h1>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200803130816895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200803131508345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<ul>
<li>
<h1 id="至此jenkins环境就搭建好了学习部署自己的脚本叭">至此，jenkins环境就搭建好了！！！学习部署自己的脚本叭</h1>
</li>
</ul>
<h1 id="jenkins学习-部署自己的第一个脚本一"><a href="https://blog.csdn.net/J_____Q/article/details/107324408">Jenkins学习--部署自己的第一个脚本（一）</a></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python+UnitTest+UnitTestReport输出美化版测试报告]]></title>
        <id>https://17603845963.github.io/post/pythonunittestunittestreport-shu-chu-mei-hua-ban-ce-shi-bao-gao/</id>
        <link href="https://17603845963.github.io/post/pythonunittestunittestreport-shu-chu-mei-hua-ban-ce-shi-bao-gao/">
        </link>
        <updated>2020-09-03T11:50:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="最近在研究-htmltestrunner">最近在研究 HTMLTestRunner ，</h1>
<h1 id="无意间在-github-发现了一套新的-unittest-测试报告生成模块">无意间在 GitHub 发现了一套新的 UnitTest 测试报告生成模块</h1>
<h1 id="附上github地址unittestreport-测试报告生成器">附上GitHub地址：<a href="https://github.com/musen123/UnitTestReport">UnitTesTReport 测试报告生成器</a></h1>
<h1 id="发现这是一位腾讯课堂-柠檬版的讲师不愧是柠檬班">发现这是一位腾讯课堂--柠檬版的讲师（不愧是柠檬班，🐂🍺）</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200801165903366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="废话不多说下面开始实操图解">废话不多说，下面开始实操+图解</h1>
<hr>
<h1 id="一-新建一个-test001py-文件">一、新建一个 test001.py 文件</h1>
<pre><code class="language-python">import unittest


class TestMethod(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    '''第一条用例'''
    def test_001(self):
        pass


if __name__ == '__main__':
    unittest.main()
</code></pre>
<h1 id="二-同目录下新建一个-testsuitepy-文件">二、同目录下新建一个 testsuite.py 文件</h1>
<pre><code class="language-python"># 导入 unittest 类
import unittest
# 从unittestreport模块导入 TestRunner 类
from unittestreport import TestRunner
# 导入测试用例类
from testcases.test001 import TestMethod

# 先用suite套件存储用例【存储测试用例的容器】
suite = unittest.TestSuite()
# 创建一个加载器,寻找所有的用例【方法】
loader = unittest.TestLoader()
# 加载所有的用例
suite.addTest(loader.loadTestsFromTestCase(TestMethod))

# 新版生成测试报告代码
runner = TestRunner(suite,
                    filename=&quot;test001.html&quot;,
                    report_dir=r&quot;D:\PyCharm_Community\testcases&quot;,
                    title='测试报告',
                    tester='X X X',
                    desc=&quot;X X X 的测试执行结果&quot;,
                    templates=1)
runner.run()
</code></pre>
<h1 id="三-运行-testsuitepy文件打开生成的测试报告html页面">三、运行 testsuite.py文件，打开生成的测试报告Html页面</h1>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200801170856844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS 7 下的 Docker初识+安装配置]]></title>
        <id>https://17603845963.github.io/post/centos-7-xia-de-docker-chu-shi-an-zhuang-pei-zhi/</id>
        <link href="https://17603845963.github.io/post/centos-7-xia-de-docker-chu-shi-an-zhuang-pei-zhi/">
        </link>
        <updated>2020-09-03T11:49:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker-配置国内加速器加速镜像下载"><a href="https://www.cnblogs.com/atuotuo/p/6264800.html">Docker - 配置国内加速器加速镜像下载</a></h1>
<hr>
<h1 id="docker-能做什么">Docker 能做什么？</h1>
<ul>
<li>
<h1 id="搭建测试环境">搭建测试环境</h1>
</li>
<li>
<h1 id="搭建各类基础服务">搭建各类基础服务</h1>
</li>
<li>
<h1 id="搭建测试执行环境">搭建测试执行环境</h1>
</li>
</ul>
<hr>
<h1 id="centos-7-下的-docker-的安装最新版">CentOS 7 下的 Docker 的安装【最新版】</h1>
<h1 id="下载安装运行就三条命令">★ ★ ★ 下载安装运行就三条命令 ★ ★ ★</h1>
<pre><code class="language-python">'''更新现有的yum包 :''' 
sudo yam update
'''执行docker安装脚本'''
curl -sSL https://get.docker.com/ | sh
'''启动docker服务'''
sudo service docker start
</code></pre>
<hr>
<h1 id="docker的基本使用命令">Docker的基本使用命令</h1>
<hr>
<h3 id="镜像管理命令">镜像管理命令 :</h3>
<hr>
<blockquote>
<ol>
<li>
<p>docker pull {image_name} (拉取镜像)</p>
</li>
<li>
<p>docker push {image_name} (推送镜像)</p>
</li>
<li>
<p>docker images (查看当前机器的所有镜像)</p>
</li>
<li>
<p>docker rmi {image_name} (删除当前机器的一个镜像)</p>
</li>
<li>
<p>docker tag {source_images_name:tag your_image_name:tag}为一个镜像打tag</p>
</li>
<li>
<p>docker save busybox &gt; busybox.tar</p>
</li>
<li>
<p>docker load &lt; busybox.tar.gz</p>
</li>
</ol>
</blockquote>
<h3 id="容器管理命令">容器管理命令</h3>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker run --name={your_name} --d {image_name}</td>
<td style="text-align:left">(运行容器)</td>
</tr>
<tr>
<td style="text-align:left">docker ps -s -a</td>
<td style="text-align:left">{查看当前所有容器}</td>
</tr>
<tr>
<td style="text-align:left">docker stop {container_name}</td>
<td style="text-align:left">(停止容器)</td>
</tr>
<tr>
<td style="text-align:left">docker kill (container_name)</td>
<td style="text-align:left">{杀死容器}</td>
</tr>
<tr>
<td style="text-align:left">docker rm -f {container_name}</td>
<td style="text-align:left">(容器如果运行中，-f强制删除容器；容器不在运行，可不加-f)</td>
</tr>
</tbody>
</table>
<h3 id="查信息相关命令">查信息相关命令</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker logs -f</td>
<td style="text-align:left">{容器名称} (查看容器日志)</td>
</tr>
<tr>
<td style="text-align:left">docker info</td>
<td style="text-align:left">(查看docker服务的信息)</td>
</tr>
<tr>
<td style="text-align:left">docker inspect</td>
<td style="text-align:left">{容器名称} (查看容器的元数据)</td>
</tr>
</tbody>
</table>
<h3 id="与容器交互的命令">与容器交互的命令</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker exec -it  {容器名称} bash</td>
<td style="text-align:left">进入容器，exec的意思是在容器中运行一个命令。如果是bash 并且指定了-it就会打开容器的shell交互</td>
</tr>
<tr>
<td style="text-align:left">docker cp {container:name}:{container_path} {host_path}</td>
<td style="text-align:left">把宿主机上的一个文件copy到容器中</td>
</tr>
</tbody>
</table>
<h3 id="容器运行命令的一些参数-docker-run">容器运行命令的一些参数 （docker run）</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker run  --name</td>
<td style="text-align:left">指定容器名称</td>
</tr>
<tr>
<td style="text-align:left">docker run  -d</td>
<td style="text-align:left">后台运行</td>
</tr>
<tr>
<td style="text-align:left">docker run      -port</td>
<td style="text-align:left">指定端口映射规则</td>
</tr>
<tr>
<td style="text-align:left">docker run   --network</td>
<td style="text-align:left">指定容器运行的网路模式</td>
</tr>
<tr>
<td style="text-align:left">docker run   -v</td>
<td style="text-align:left">指定需要挂载的数据卷</td>
</tr>
<tr>
<td style="text-align:left">docker run    -env</td>
<td style="text-align:left">指定需要传递给容器的环境变量</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MeterSphere的部署安装]]></title>
        <id>https://17603845963.github.io/post/metersphere-de-bu-shu-an-zhuang/</id>
        <link href="https://17603845963.github.io/post/metersphere-de-bu-shu-an-zhuang/">
        </link>
        <updated>2020-09-03T11:48:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="metersphere-是一站式的开源企业级持续测试平台">MeterSphere 是一站式的开源企业级持续测试平台，</h1>
<h1 id="涵盖测试跟踪-接口测试-性能测试-团队协作等功能">涵盖测试跟踪、接口测试、性能测试、团队协作等功能，</h1>
<h1 id="兼容jmeter-等开源标准">兼容JMeter 等开源标准，</h1>
<h1 id="有效助力开发和测试团队充分利用云弹性进行高度可扩展的自动化测试">有效助力开发和测试团队充分利用云弹性进行高度可扩展的自动化测试，</h1>
<h1 id="加速高质量软件的交付">加速高质量软件的交付。</h1>
<h1 id="metersphere-学习介绍文档"><a href="https://metersphere.io/docs/">MeterSphere 学习介绍文档</a></h1>
<hr>
<ul>
<li>
<h3 id="操作系统-任何支持-docker-的-linux-x64">操作系统: 任何支持 Docker 的 Linux x64</h3>
</li>
<li>
<h3 id="cpu内存-2核4g最小">CPU/内存: 2核4G（最小）</h3>
</li>
<li>
<h3 id="磁盘空间-20g">磁盘空间: 20G</h3>
</li>
<li>
<h3 id="可访问互联网">可访问互联网</h3>
</li>
</ul>
<hr>
<h1 id="一-界面展示">一 、界面展示：</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200812105019645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<h1 id="二-部署安装">二、部署安装</h1>
<ul>
<li>
<h3 id="执行安装脚本">执行安装脚本</h3>
</li>
<li>
<h3 id="以-root-用户-ssh-登录目标服务器-执行如下命令">以 root 用户 ssh 登录目标服务器, 执行如下命令</h3>
<blockquote>
<p>curl -sSL https://github.com/metersphere/metersphere/releases/latest/download/quick_start.sh | sh</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="三-登录">三、登录</h1>
<ul>
<li>
<h3 id="安装成功后通过浏览器访问如下页面登录-metersphere">安装成功后，通过浏览器访问如下页面登录 MeterSphere</h3>
<strong>地址: http://目标服务器IP地址:8081<br>
用户名: admin<br>
密码: metersphere</strong></li>
</ul>
<h3 id="您可以使用命令-msctl-status-检查服务运行情况">您可以使用命令 'msctl status' 检查服务运行情况.</h3>
<hr>
<h1 id="四-功能">四、功能</h1>
<p><img src="https://img-blog.csdnimg.cn/20200812105419959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200812105438617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200812105454609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200812105510346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jmeter --- time函数生成时间戳]]></title>
        <id>https://17603845963.github.io/post/jmeter-time-han-shu-sheng-cheng-shi-jian-chuo/</id>
        <link href="https://17603845963.github.io/post/jmeter-time-han-shu-sheng-cheng-shi-jian-chuo/">
        </link>
        <updated>2020-09-03T11:47:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-元件位置">一、元件位置</h1>
<ul>
<li>
<h3 id="tools-函数助手对话框">Tools  →   函数助手对话框</h3>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200817174724841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="二-生成时间戳">二、生成时间戳</h1>
<hr>
<ul>
<li>
<h2 id="1-未作处理的时间戳">1、未作处理的时间戳</h2>
<img src="https://img-blog.csdnimg.cn/20200817175532286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<hr>
<hr>
<ul>
<li>
<h2 id="2-除以1000得到少三位数的时间戳">2、除以1000，得到少三位数的时间戳</h2>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200817175800473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python基础之 zip( ) 实现行列转化]]></title>
        <id>https://17603845963.github.io/post/python-ji-chu-zhi-zip-shi-xian-xing-lie-zhuan-hua/</id>
        <link href="https://17603845963.github.io/post/python-ji-chu-zhi-zip-shi-xian-xing-lie-zhuan-hua/">
        </link>
        <updated>2020-09-03T11:47:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="现在有一个列表如下">现在有一个列表如下：</h2>
<pre><code class="language-python">user_info = [[&quot;name&quot;,&quot;age&quot;,&quot;gender&quot;,&quot;food&quot;],
             [&quot;张三&quot;,&quot;15&quot;,&quot;男&quot;,&quot;吃零食&quot;],
             [&quot;李四&quot;,&quot;25&quot;,&quot;女&quot;,&quot;吃烧烤&quot;],
             [&quot;王五&quot;,&quot;30&quot;,&quot;男&quot;,&quot;吃米饭&quot;]]
</code></pre>
<h2 id="需要将其转化为如下格式">需要将其转化为如下格式：</h2>
<pre><code class="language-python">new_info = [{&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:&quot;15&quot;,&quot;gender&quot;:&quot;男&quot;,&quot;food&quot;:&quot;吃零食&quot;},
            {&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:&quot;25&quot;,&quot;gender&quot;:&quot;女&quot;,&quot;food&quot;:&quot;吃烧烤&quot;},
            {&quot;name&quot;:&quot;王五&quot;,&quot;age&quot;:&quot;30&quot;,&quot;gender&quot;:&quot;男&quot;,&quot;food&quot;:&quot;吃米饭&quot;}]
</code></pre>
<hr>
<h1 id="代码设计思路">代码设计思路：</h1>
<ul>
<li>
<h3 id="通过下标提取第零个元素作为-key">通过下标提取第零个元素作为 key</h3>
</li>
<li>
<h3 id="用过下标提取之后所有的元素循环遍历作为-对应的-value">用过下标提取之后所有的元素循环遍历作为 对应的 value</h3>
</li>
<li>
<h3 id="通过-zip-进行对应行列转化">通过 zip() 进行对应行列转化</h3>
</li>
<li>
<h3 id="通过dict-将结果转化为字典格式">通过dict() 将结果转化为字典格式</h3>
</li>
<li>
<h3 id="使用空列表接收所有数据">使用空列表接收所有数据</h3>
</li>
</ul>
<hr>
<h2 id="代码实现">代码实现：</h2>
<pre><code class="language-python">
# 定义一个使用方法
def zip_use(user_info):
    # 先准备一个空列表
    res = []
    # 将需要的 key值根据下标提取出来
    title = user_info[0]
    # 将需要的 value值根据下标提取出来并循环遍历
    info = user_info[1:]
    
    for i in info:
        # 通过zip进行行列转化，并通过dict转化为字典格式
        new_res = dict(zip(title,i))
        # 每次循环完成，空列表添加一条数据
        res.append(new_res)
    # 返回循环结束后的列表
    return res

'''通过调用 zip_use 方法，打印结果'''
print(zip_use(user_info))

</code></pre>
<h2 id="打印结果">打印结果：</h2>
<pre><code class="language-python">C:\Users\86176\AppData\Local\Programs\Python\Python36\python.exe D:/PyCharm_Community/class/study/zip行列转化.py
[{'name': '张三', 'age': '15', 'gender': '男', 'food': '吃零食'}, {'name': '李四', 'age': '25', 'gender': '女', 'food': '吃烧烤'}, {'name': '王五', 'age': '30', 'gender': '男', 'food': '吃米饭'}]

Process finished with exit code 0

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python基础之 OS 模块的常见使用方法+ open() 配合使用]]></title>
        <id>https://17603845963.github.io/post/python-ji-chu-zhi-os-mo-kuai-de-chang-jian-shi-yong-fang-fa-open-pei-he-shi-yong/</id>
        <link href="https://17603845963.github.io/post/python-ji-chu-zhi-os-mo-kuai-de-chang-jian-shi-yong-fang-fa-open-pei-he-shi-yong/">
        </link>
        <updated>2020-09-03T11:46:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="os模块有许多方法让我们通过代码实现创建删除和更改目录">os模块有许多方法让我们通过代码实现创建，删除和更改目录</h1>
<h1 id="具体罗列如下">具体罗列如下：</h1>
<hr>
<hr>
<h2 id="一-osgetcwd">一、 os.getcwd():</h2>
<h3 id="getcwd-方法显示当前的工作路径只具体到路径不具体到文件">getcwd() 方法显示当前的工作路径，只具体到路径，不具体到文件。</h3>
<h3 id="实际过程中用得较少">【 实际过程中用得较少 】</h3>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200823114616493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="二-ospathrealpath_-_-file-_-_-用得非常多">二、os.path.realpath(_ _ <em>file</em> _ _)  用得非常多</h2>
<h3 id="显示文件的绝对路径">【 显示文件的绝对路径 】</h3>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200823115300279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="三-ospathdirnamefile">三、os.path.dirname(<strong>file</strong>)</h2>
<h3 id="显示文件所在文件夹的路径">显示文件所在文件夹的路径</h3>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200823115749941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="四-ospathjoin-a-b-路径拼接">四、os.path.join ( a , b ) 路径拼接</h2>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200823120613154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="五-osmkdir-绝对路径-创建指定路径的文件夹">五、os.mkdir ( 绝对路径 )：  创建指定路径的文件夹</h2>
<h2 id="注多级创建的时候前面必须要存在-一级级的创建">【 注：多级创建的时候前面必须要存在。一级—级的创建 】</h2>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200823121611679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="六-osrmdir-绝对路径-删除指定路径的文件夹">六、os.rmdir ( 绝对路径 ) ： 删除指定路径的文件夹</h2>
<h2 id="注多级删除的时候前面必须要存在一级级的删除">【 注：多级删除的时候前面必须要存在，一级—级的删除 】</h2>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200823122432975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="七-oslistdir-获取当前路径下的目录列表">七、os.listdir ( ) : 获取当前路径下的目录列表</h2>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200823123220449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="八-判断是否为文件文件夹">八、判断是否为文件\文件夹</h2>
<ul>
<li>
<h1 id="ospathisdir-判断当前文件是否是目录返回布尔值">os.path.isdir : 判断当前文件是否是目录,返回布尔值</h1>
</li>
<li>
<h1 id="ospathisfile-判断当前文件是否是文件返回布尔值">os.path.isfile : 判断当前文件是否是文件,返回布尔值</h1>
</li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200823123939238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="九-ospathexists-判断路径是否存在">九、os.path.exists ：判断路径是否存在</h2>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200823124620131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h1 id="os-模块-open-配合使用">OS 模块 +  open( )  配合使用</h1>
<pre><code class="language-python">import os

# 获取当前文件所在的文件夹路径
a = os.path.dirname(os.path.abspath(__file__))

# 将路径拼接文件名
b = os.path.join(a,'new.txt')

# 使用 open() 打开该路径的文件，读取方式为 utf-8
c = open(b,encoding='utf-8')

# 使用 read() 方法读取文件内容
print(c.read())

# 关闭文件
c.close()
</code></pre>
]]></content>
    </entry>
</feed>