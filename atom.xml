<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://17603845963.github.io</id>
    <title>井 sir 的私人博客</title>
    <updated>2020-09-03T12:04:56.345Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://17603845963.github.io"/>
    <link rel="self" href="https://17603845963.github.io/atom.xml"/>
    <subtitle>一位秀发茂密的测试工程师</subtitle>
    <logo>https://17603845963.github.io/images/avatar.png</logo>
    <icon>https://17603845963.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 井 sir 的私人博客</rights>
    <entry>
        <title type="html"><![CDATA[Jmeter环境搭建]]></title>
        <id>https://17603845963.github.io/post/jmeter-huan-jing-da-jian/</id>
        <link href="https://17603845963.github.io/post/jmeter-huan-jing-da-jian/">
        </link>
        <updated>2020-09-03T12:03:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-搭建jmeter环境">一、搭建jmeter环境：</h2>
<p><strong>链接：https://pan.baidu.com/s/1D2uvrrThEeuhVS26rofDXg<br>
提取码：ekln</strong></p>
<p>内附 jmeter 包和 JDK 安装包<br>
<img src="https://img-blog.csdnimg.cn/20200718001737487.png" alt="在这里插入图片描述" loading="lazy"></p>
<ul>
<li>
<h1 id="jdk环境搭建path-中添加exe-绝对路径">JDK环境搭建：【PATH 中添加.exe 绝对路径】</h1>
<img src="https://img-blog.csdnimg.cn/20200717235955112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
<li>
<h1 id="cmd运行-java-version-显示如图所示结果即为配置成功">cmd运行 <strong>java -version</strong> 显示如图所示结果即为配置成功</h1>
<img src="https://img-blog.csdnimg.cn/20200718000230913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<h2 id="二-运行jmeter程序">二、运行Jmeter程序</h2>
<ul>
<li>jmeter 文件夹下载后剪切到自定义目录下，进入 bin目录<br>
<img src="https://img-blog.csdnimg.cn/2020071800081735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<h1 id="三-jmeter启动后页面展示">三、Jmeter启动后页面展示</h1>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/2020071800093995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<h1 id="这里说明一下apachejmeterjar-文件双击无法启动-jmeter-就选择双击-jmeterbat-来启动但是这步操作会顺带启动一个-cmd-窗口稍带强迫症用户请参考我的这篇文章">这里说明一下，ApacheJMeter.jar 文件双击无法启动 jmeter ，就选择双击 jmeter.bat 来启动，但是这步操作会顺带启动一个 cmd 窗口，稍带强迫症用户请参考我的这篇文章：</h1>
<h1 id="jmeter图标双击运行且不显示cmd对话框"><a href="https://blog.csdn.net/J_____Q/article/details/106176704">Jmeter图标双击运行且不显示cmd对话框</a></h1>
<hr>
<hr>
<h1 id="下一篇写一下如何使用-jmeter-抓取web端与手机app端的请求接口网上的教程太坑了-有兴趣可以看看">下一篇写一下如何使用 jmeter 抓取Web端与手机APP端的请求接口，网上的教程太坑了 ，有兴趣可以看看</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fiddler工具之抓取IOS设备app的包]]></title>
        <id>https://17603845963.github.io/post/fiddler-gong-ju-zhi-zhua-qu-ios-she-bei-app-de-bao/</id>
        <link href="https://17603845963.github.io/post/fiddler-gong-ju-zhi-zhua-qu-ios-she-bei-app-de-bao/">
        </link>
        <updated>2020-09-03T12:03:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-fiddler-设置">一、Fiddler 设置</h1>
<ul>
<li>
<h1 id="点击-tools-fiddler-options">点击 Tools &gt; Fiddler Options</h1>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200718124336103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li>
<h2 id="勾选-capture-https-connects">勾选 Capture HTTPS CONNECTS</h2>
</li>
<li>
<h2 id="勾选-decrypt-https-traffic">勾选 Decrypt HTTPS traffic</h2>
</li>
<li>
<h2 id="勾选-allow-remote-computers-to-connect">勾选 Allow  remote computers to connect</h2>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200718124525455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200718124401422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li>
<h1 id="重启-fiddler">重启 Fiddler</h1>
</li>
<li>
<h1 id="确保防火墙允许-fiddler-进程可以远程连接">确保防火墙允许 Fiddler 进程可以远程连接</h1>
<p>【直接关闭本机防火墙，此项即可无视】</p>
</li>
<li>
<h1 id="ios设备连接到wifi">IOS设备连接到WIFI</h1>
<p>ios设备必须和Fiddler所在主机处在相同网段<br>
测试方法：<br>
cmd &gt;ping 手机ip地址，收到正确回复则为主机与手机网路畅通<br>
<img src="https://img-blog.csdnimg.cn/20200718125233818.png" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li>
<h1 id="确保ios设备可以访问到http主机ip8888">确保ios设备可以访问到：http://主机IP:8888，</h1>
<p><strong>该地址会返回Fiddler Echo Service 页面</strong><br>
<img src="https://img-blog.csdnimg.cn/20200718125553757.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718125713256.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718130945130.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020071813100958.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718131054897.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718131251346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li>
<h1 id="安装完成后信任证书">安装完成后信任证书</h1>
</li>
</ul>
<p>设置 &gt; 通用 &gt; 关于本机 &gt; 证书信任设置，信任刚刚安装的 Fiddler 证书<br>
<img src="https://img-blog.csdnimg.cn/20200718131737507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<hr>
<h1 id="二-ios设备设置">二、iOS设备设置</h1>
<ol>
<li>设置 &gt; WiFi &gt; 打开已连接的WiFi</li>
<li>点击配置代理 &gt; 手动</li>
<li>设置 iOS 代理服务器地址为 Fiddler 所在主机的 ip 地址</li>
<li>设置端口为 Fiddler 监听的端口：默认8888</li>
<li>保存当前代理设置信息</li>
<li>打开一个网页或者App，此时 Fiddler 已经可以捕获到 HTTP 请求了</li>
<li><img src="https://img-blog.csdnimg.cn/20200718130618735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jmeter—处理Unicode编码转为中文]]></title>
        <id>https://17603845963.github.io/post/jmeter-chu-li-unicode-bian-ma-zhuan-wei-zhong-wen/</id>
        <link href="https://17603845963.github.io/post/jmeter-chu-li-unicode-bian-ma-zhuan-wei-zhong-wen/">
        </link>
        <updated>2020-09-03T11:54:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="原文链接jmeter处理unicode编码转为中文"><a href="https://blog.csdn.net/weixin_42675206/article/details/81064257">原文链接：Jmeter—处理Unicode编码转为中文</a></h1>
<p>1.添加一个后置处理器（BeanShell PostProcessor）</p>
<p>2.编写转译方法</p>
<p>3.保存，运行<br>
<img src="https://img-blog.csdnimg.cn/20200719204320804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
源码如下：</p>
<pre><code class="language-python">代码如下：

String s2=new String(prev.getResponseData(),&quot;UTF-8&quot;);
//---------------一下步骤为转码过程---------------
        char aChar;
        int len= s2.length();
        StringBuffer outBuffer=new StringBuffer(len);
        for(int x =0; x &lt;len;){
            aChar= s2.charAt(x++);
            if(aChar=='\\'){
                aChar= s2.charAt(x++);
                if(aChar=='u'){
                    int value =0;
                    for(int i=0;i&lt;4;i++){
                        aChar= s2.charAt(x++);
                        switch(aChar){
                            case'0':
                            case'1':
                            case'2':
                            case'3':
                            case'4':
                            case'5':
                            case'6':
                            case'7':
                            case'8':
                            case'9':
                                value=(value &lt;&lt;4)+aChar-'0';
                                break;
                            case'a':
                            case'b':
                            case'c':
                            case'd':
                            case'e':
                            case'f':
                                value=(value &lt;&lt;4)+10+aChar-'a';
                                break;
                            case'A':
                            case'B':
                            case'C':
                            case'D':
                            case'E':
                            case'F':
                                value=(value &lt;&lt;4)+10+aChar-'A';
                                break;
                            default:
                                throw new IllegalArgumentException(
                                        &quot;Malformed   \\uxxxx  encoding.&quot;);}}
                    outBuffer.append((char) value);}else{
                    if(aChar=='t')
                        aChar='\t';
                    else if(aChar=='r')
                    aChar='\r';
                    else if(aChar=='n')
                    aChar='\n';
                    else if(aChar=='f')
                    aChar='\f';
                    outBuffer.append(aChar);}}else
                outBuffer.append(aChar);}
//-----------------以上内容为转码过程---------------------------
//将转成中文的响应结果在查看结果树中显示

        prev.setResponseData(outBuffer.toString());
</code></pre>
<p>————————————————<br>
版权声明：本文为CSDN博主「Nathan_jyx」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>
原文链接：https://blog.csdn.net/weixin_42675206/article/details/81064257</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jmeter之压测Mysql数据库（前期配置+操作详解）]]></title>
        <id>https://17603845963.github.io/post/jmeter-zhi-ya-ce-mysql-shu-ju-ku-qian-qi-pei-zhi-cao-zuo-xiang-jie/</id>
        <link href="https://17603845963.github.io/post/jmeter-zhi-ya-ce-mysql-shu-ju-ku-qian-qi-pei-zhi-cao-zuo-xiang-jie/">
        </link>
        <updated>2020-09-03T11:53:49.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-jdbc%E5%8E%8B%E6%B5%8Bmysql%E7%9B%B8%E5%85%B3%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">1. jdbc压测mysql相关准备工作</a><br>
*
<ul>
<li><a href="#1-thread-group-add-sampler-jdbc-request">1、Thread Group -&gt; add -&gt; sampler -&gt; jdbc request</a></li>
<li><a href="#2-jdbc-request-%E9%85%8D%E7%BD%AE%E5%85%83%E4%BB%B6-jdbc-connection-configuration">2. JDBC Request &gt; 配置元件 &gt; JDBC Connection Configuration</a></li>
<li><a href="#3%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85mysql%E5%B9%B6%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93">3.配置数据库【本地安装mysql并新建一个数据库】</a></li>
</ul>
</li>
<li><a href="#2-jar%E5%8C%85%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%B7%B1%E4%B8%8B%E5%88%AB%E6%8E%8F%E9%92%B1%E4%B8%8B%E8%BD%BD%E5%95%A6">2. jar包添加【自己下，别掏钱下载啦】</a><br>
*
<ul>
<li><a href="#%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92%E4%B8%AD%E6%B7%BB%E5%8A%A0-mysql-connector-java5138jar-%E6%96%87%E4%BB%B6">测试计划中添加 mysql-connector-java/5.1.38.jar 文件</a></li>
</ul>
</li>
<li><a href="#3-%E9%85%8D%E7%BD%AE%E8%AE%B2%E8%A7%A3">3. 配置讲解</a><br>
*
<ul>
<li><a href="#1-jdbc-request-%E9%85%8D%E7%BD%AE">1. JDBC Request 配置</a></li>
<li><a href="#2-jdbc-connection-configuration%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE">2. JDBC Connection Configuration【数据库连接配置】</a></li>
</ul>
</li>
<li><a href="#4-mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%8B%E6%B5%8B%E8%B0%83%E8%AF%95">4、Mysql 数据库压测调试</a><br>
*
<ul>
<li><a href="#1-jdbc-request-sql-query-%E4%B8%AD%E8%BE%93%E5%85%A5%E7%AE%80%E5%8D%95%E7%9A%84sql%E8%AF%AD%E5%8F%A5">1、JDBC Request &gt; SQL Query 中输入简单的SQL语句</a></li>
<li><a href="#2-%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C">2、调试结果</a></li>
</ul>
</li>
<li><a href="#5-jdbc-request-%E5%8F%82%E6%95%B0%E8%AE%B2%E8%A7%A3">5、JDBC Request 参数讲解：</a><br>
*
<ul>
<li><a href="#1-%E9%A2%84%E7%BC%96%E8%AF%91-select-%E8%AF%AD%E5%8F%A5%E6%9F%A5%E8%AF%A2%E8%AF%A6%E8%A7%A3">1、预编译 select 语句查询详解</a></li>
</ul>
</li>
</ul>
(Jmeter压测实战之JDBC request压测Mysql)</p>
<h1 id="1-jdbc压测mysql相关准备工作">1. jdbc压测mysql相关准备工作</h1>
<h3 id="1-thread-group-add-sampler-jdbc-request">1、Thread Group -&gt; add -&gt; sampler -&gt; jdbc request</h3>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200721235644618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="2-jdbc-request-配置元件-jdbc-connection-configuration">2. JDBC Request &gt; 配置元件 &gt; JDBC Connection Configuration</h3>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200721235904507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="3配置数据库本地安装mysql并新建一个数据库">3.配置数据库【本地安装mysql并新建一个数据库】</h3>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200722001049855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h1 id="2-jar包添加自己下别掏钱下载啦">2. jar包添加【自己下，别掏钱下载啦】</h1>
<p><strong>点击跳转下载地址</strong>：<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java/5.1.38"><strong>mysql-connector-java/5.1.38</strong></a><br>
<img src="https://img-blog.csdnimg.cn/20200722002832243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="测试计划中添加-mysql-connector-java5138jar-文件">测试计划中添加 mysql-connector-java/5.1.38.jar 文件</h3>
<p><strong>这步操作结束后，JDBC Connection Configuration数据库连接配置中才可以选择驱动</strong></p>
<ul>
<li><strong>JDBC Driver class &gt;  com.mysql.jdbc.Driver</strong><br>
<img src="https://img-blog.csdnimg.cn/20200722004232967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<hr>
<hr>
<h1 id="3-配置讲解">3. 配置讲解</h1>
<h3 id="1-jdbc-request-配置">1. JDBC Request 配置</h3>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200722003932690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="2-jdbc-connection-configuration数据库连接配置">2. JDBC Connection Configuration【数据库连接配置】</h3>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200722010348711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li><strong>续上图</strong><br>
<img src="https://img-blog.csdnimg.cn/20200722010534462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<h1 id="4-mysql-数据库压测调试">4、Mysql 数据库压测调试</h1>
<p>配置工作完成后，就可以进行简单的调试</p>
<h3 id="1-jdbc-request-sql-query-中输入简单的sql语句">1、JDBC Request &gt; SQL Query 中输入简单的SQL语句</h3>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200722010831936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="2-调试结果">2、调试结果</h3>
<p><img src="https://img-blog.csdnimg.cn/20200722011204407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200722011223350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<h1 id="5-jdbc-request-参数讲解">5、JDBC Request 参数讲解：</h1>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200722013540327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="1-预编译-select-语句查询详解">1、预编译 select 语句查询详解</h3>
<p><img src="https://img-blog.csdnimg.cn/20200724102212177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200724102727421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pycharm正式版安装教程]]></title>
        <id>https://17603845963.github.io/post/pycharm-zheng-shi-ban-an-zhuang-jiao-cheng/</id>
        <link href="https://17603845963.github.io/post/pycharm-zheng-shi-ban-an-zhuang-jiao-cheng/">
        </link>
        <updated>2020-09-03T11:53:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="pycharm正式版">Pycharm正式版</h1>
<h2 id="帮你们准备好了网盘链接下载后解压本地任意文件夹">帮你们准备好了网盘链接，下载后解压本地任意文件夹</h2>
<p><strong>链接：https://pan.baidu.com/s/1dp0BJy2QR0bvDMORLi50Sw<br>
提取码：bxkq</strong><br>
<img src="https://img-blog.csdnimg.cn/20200722094409157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<hr>
<h1 id="一-安装-python">一、安装 Python</h1>
<h2 id="1-安装时选择安装界面的-add-python-37-to-path-进行勾选避免再次配置环境变量">1、<strong>安装时选择安装界面的“ Add Python 3.7 to PATH ”进行勾选，避免再次配置环境变量</strong></h2>
<p><strong>32位、64位自行选择</strong><br>
<img src="https://img-blog.csdnimg.cn/20200722093646972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="2-验证python环境配置">2、验证Python环境配置</h2>
<ol>
<li>win +R 输入 cmd ，打开命令行窗口</li>
<li>输入 python 显示版本号即为配置成功<br>
<img src="https://img-blog.csdnimg.cn/20200722170922391.png" alt="在这里插入图片描述" loading="lazy"></li>
</ol>
<hr>
<hr>
<h1 id="二-安装pycharm">二、安装Pycharm</h1>
<h2 id="1-双击解压好的-pycharm-professional-173372788exe-文件进行安装">1、双击解压好的 pycharm-professional-173.3727.88.exe 文件进行安装</h2>
<h2 id="2-将该解压的-jar-文件放到pycharm安装目录的bin目录下">2、将该解压的 .jar 文件放到pycharm安装目录的bin目录下</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200722094538266.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="3-在-bin-目录找到-pycharm64exevmoptions-文件并打开">3、在 bin 目录找到 pycharm64.exe.vmoptions 文件并打开</h2>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200722095844364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="4-在最后一行添加如下内容点击保存两个文件都要修改">4、在最后一行添加如下内容，点击保存【两个文件都要修改】</h2>
<pre><code class="language-python">'''这个是我的安装路径，参考格式替换成自己的'''
-javaagent:D:\Program Files\JetBrains\PyCharm 2017.3\bin\JetbrainsCrack-2.6.10-release-enc.jar
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200722100007968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="5-启动-pycharm-程序">5、启动 pycharm 程序</h2>
<ul>
<li>
<h3 id="pycharm打开help-register">pycharm打开→Help → Register</h3>
<img src="https://img-blog.csdnimg.cn/20200722100335667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">
<ul>
<li>
<h3 id="选择注册码激活粘贴网盘链接的激活完点击确定按钮">选择注册码激活，粘贴网盘链接的激活完，点击确定按钮</h3>
</li>
</ul>
<img src="https://img-blog.csdnimg.cn/20200722100507236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
<li>
<h3 id="点击-help-about-查看破解状态">点击 Help &gt;  About 查看破解状态</h3>
<img src="https://img-blog.csdnimg.cn/202007221009203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
<li>
<h3 id="再次重启pycharm破解完成可以愉快的-printhello-world">再次重启Pycharm，破解完成，可以愉快的 print(&quot;Hello world&quot;)</h3>
<img src="https://img-blog.csdnimg.cn/20200722101141179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python用例和数据的分离处理之DDT数据驱动测试]]></title>
        <id>https://17603845963.github.io/post/python-yong-li-he-shu-ju-de-fen-chi-chu-li-zhi-ddt-shu-ju-qu-dong-ce-shi/</id>
        <link href="https://17603845963.github.io/post/python-yong-li-he-shu-ju-de-fen-chi-chu-li-zhi-ddt-shu-ju-qu-dong-ce-shi/">
        </link>
        <updated>2020-09-03T11:52:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ddt-data-driver-test-数据驱动测试">DDT 【data driver test 数据驱动测试】</h1>
<hr>
<h1 id="一-先安装-ddt-模块">一、先安装 ddt 模块：</h1>
<ul>
<li>
<h3 id="方法一可以直接-cmd-命令行敲-pip-install-ddt-pip行不通试试-pip3-pipexe-安装">方法一：可以直接 cmd 命令行敲： <strong>pip install ddt</strong> 【pip行不通试试 pip3 / pip.exe 安装】</h3>
</li>
<li>
<h3 id="方法二按照下面的gif图片在pycharm直接安装">方法二：按照下面的GIF图片，在pycharm直接安装<img src="https://img-blog.csdnimg.cn/20200801213821214.gif" alt="在这里插入图片描述" loading="lazy"></h3>
</li>
</ul>
<h1 id="二-ddt-简单使用">二、ddt 简单使用</h1>
<ul>
<li>
<h3 id="先导入-ddt-模块-import-ddt">先导入 ddt 模块： import ddt</h3>
</li>
<li>
<h3 id="class类上方输入-ddtddt-装饰器固定语法无需深究">class类上方输入： @ddt.ddt  【装饰器，固定语法，无需深究】</h3>
</li>
<li>
<h3 id="函数方法上方输入-ddtdata">函数方法上方输入： @ddt.data( )</h3>
</li>
<li>
<h3 id="括号传参传几个参数就生成几条测试用例">↑ ↑ ↑ 【括号传参，传几个参数就生成几条测试用例】</h3>
</li>
</ul>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/01
#  @File    : ddt_test.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-
import unittest
# 先导入 ddt 模块
import ddt


# 固定语法，无需深究
@ddt.ddt
class TestMethod(unittest.TestCase):
    # @ddt.data(括号中写参数，有几个参数，就生成多少条测试用例)
    @ddt.data(1,2,3,4)
    # case为形参，用于接收数据
    def test_001(self,case):
        print(&quot;测试用例,第{}条&quot;.format(case))


if __name__ == '__main__':
    unittest.main()
</code></pre>
<h2 id="main方法输入测试结果"><strong>main方法输入测试结果：</strong><img src="https://img-blog.csdnimg.cn/20200801233334667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h2>
<h1 id="三-ddt-在用例中的使用">三、ddt 在用例中的使用</h1>
<h3 id="1-封装一个类方法">1. 封装一个类方法</h3>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/01
#  @File    : D:\PyCharm_Community\DDT\test_login.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-

'''封装一个类方法'''
import requests


class Login():
    def __init__(self,userName,password):
        self.userName = userName
        self.password = password

    def login(self):
        url = 'http://182.92.197.48:8088/api/user/login'
        json = {&quot;userName&quot;: self.userName, &quot;password&quot;: self.password, &quot;remember&quot;: False}
        header = {&quot;user-Agent&quot;: &quot;Mozilla/5.0&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;}
        res = requests.post(url, headers=header, json=json)
        print(res.json())
        return res.json()


Login(&quot;xzsks001&quot;,&quot;123456&quot;).login()
</code></pre>
<h3 id="2-准备变量参数数据-使用-ddt-分离数据">2. 准备变量参数数据 , 使用 ddt 分离数据</h3>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/01
#  @File    : D:\PyCharm_Community\DDT\ddt_test.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-
import unittest
# 导入 ddt 模块
import ddt
from DDT.test_login import Login

data_info = [   {&quot;params&quot;:(&quot;xzsks001&quot;,&quot;123456&quot;),&quot;excepted&quot;:{'code': 1, 'message': '成功'}},
                {&quot;params&quot;:(&quot;xzsks&quot;,&quot;123456&quot;),&quot;excepted&quot;:{'code': 402, 'message': '用户名或密码错误', 'response': None}},
                {&quot;params&quot;:(&quot;zhangsan&quot;,&quot;123&quot;),&quot;excepted&quot;:{'code': 402, 'message': '用户名或密码错误', 'response': None}}]


# 固定语法，无需深究
@ddt.ddt
class TestMethod(unittest.TestCase):
    # @ddt.data(括号中写参数，有几个参数，就生成多少条测试用例)
    @ddt.data(*data_info)
    # case为形参，用于接收数据，dict类型
    def test_001(self,case):
        # 预期结果为 case的excepted的属性值
        excepted = case[&quot;excepted&quot;]
        # 传入参数为 case的params的属性值
        params = case[&quot;params&quot;]
        # 调用被测函数，传入参数，获取实际结果
        result = Login(*params).login()
        # 比对预期与实际结果是否一致
        self.assertEqual(excepted,result)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<h3 id="3执行结果生成测试报告">3.执行结果，生成测试报告</h3>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200802005350164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python之openpyxl操作Excel文件读写]]></title>
        <id>https://17603845963.github.io/post/python-zhi-openpyxl-cao-zuo-excel-wen-jian-du-xie/</id>
        <link href="https://17603845963.github.io/post/python-zhi-openpyxl-cao-zuo-excel-wen-jian-du-xie/">
        </link>
        <updated>2020-09-03T11:52:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-安装-openpyxl-模块">一、安装 Openpyxl 模块</h1>
<h3 id="file-settings-project-interpreter">File &gt; Settings &gt; Project Interpreter<img src="https://img-blog.csdnimg.cn/20200802014708962.gif" alt="在这里插入图片描述" loading="lazy"></h3>
<h1 id="二-桌面生成-excel-文件写入一些数据并复制到pycharm中">二、桌面生成 Excel 文件，写入一些数据并复制到PyCharm中</h1>
<h1 id="注openpyxl-只支持-xlsx-格式的-excel-文件">注：【openpyxl 只支持 .xlsx 格式的 Excel 文件】</h1>
<p><img src="https://img-blog.csdnimg.cn/20200802020203978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200802020833985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200802021515824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="三-pycharm-中使用-openpyxl-读取文件数据">三、pycharm 中使用 openpyxl 读取文件数据</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200802021953456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/02
#  @File    : openpyxl_study.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-
# 导入 openpyxl 模块
import openpyxl

# 1、将指定 excel 文件加载到一个工作簿对象中
wb = openpyxl.load_workbook(&quot;jzq.xlsx&quot;)
# 2、选择文件中的表单【sheet表名】
sheet = wb['login']
# 3、根据行号和列号读取数据【第一行第一列的数据】
res = sheet.cell(row=1,column=1)
# 4、打印取到的数据值
print(res.value)

</code></pre>
<h1 id="四-pycharm-中使用-openpyxl-操作-excel-写入数据">四、pycharm 中使用 openpyxl 操作 Excel 写入数据</h1>
<pre><code class="language-python">
# 导入 openpyxl 模块
import openpyxl

# 1、将指定 excel 文件加载到一个工作簿对象中
wb = openpyxl.load_workbook(&quot;jzq.xlsx&quot;)
# 2、选择文件中的表单【sheet表名】
sheet = wb['login']
# 3、根据行号、列号输入value值
sheet.cell(row=1,column=1,value=&quot;张三&quot;)
# 4、保存为文件
wb.save(&quot;jzq.xlsx&quot;)

</code></pre>
<h4 id="执行后的结果">执行后的结果：</h4>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200802080637115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="如果出现以下报错信息-请注意">如果出现以下报错信息 ，请注意 ：</h4>
<h2 id="在写入数据时文件不可处于打开状态">【在写入数据时，文件不可处于打开状态 ！！！】</h2>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200802080804822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="五-读取文件所有单元格的数据内容">五、读取文件所有单元格的数据内容</h1>
<pre><code class="language-python"># 导入 openpyxl 模块
import openpyxl

'''读取文件所有单元格的数据'''
# 1、将指定 excel 文件加载到一个工作簿对象中
wb = openpyxl.load_workbook(&quot;jzq.xlsx&quot;)
# 2、选择文件中的表单【sheet表名】
sheet = wb['login']
# 3、使用 .rows 方法把所有的表单对象存储在列表中
# type为列表嵌套元组再嵌套单元格
res = list(sheet.rows)
# 遍历每一行的内容
for cases in res :
    # 遍历每一行的所有单元格
    for cells in cases :
        # 获取每个单元格的 value 值
        print(cells.value,end=&quot;   &quot;)
    print()
    
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200802084316329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="六-openpyxl-读取-组装用例数据">六、 Openpyxl 读取、组装用例数据</h1>
<ul>
<li>
<h3 id="新建一个-xlsx-文件">新建一个 .xlsx 文件<img src="https://img-blog.csdnimg.cn/20200802103014477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h3>
</li>
<li>
<h3 id="复制文件至pycharm中并新建一个读取组装数据的-py文件">复制文件至pycharm中，并新建一个读取组装数据的 py文件<img src="https://img-blog.csdnimg.cn/20200802103544364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h3>
</li>
</ul>
<pre><code class="language-python"># 导入 openpyxl 模块
import openpyxl

'''用例数据读取组装成列表嵌套字典的格式'''
# 1、将指定 excel 文件加载到一个工作簿对象中
wb = openpyxl.load_workbook(&quot;jzq_openpyxl.xlsx&quot;)
# 2、选择文件中的表单【sheet表名】
sheet = wb['login']
res = list(sheet.rows)

'''获取第一行的单元格'''
title = []
# 遍历第一行单元格所有数据并添加到列表中
for tag in res[0]:
    title.append(tag.value)
case_data = []
'''遍历除了第一行以外的所有行'''
for row in res[1:]:
    data = []
    # 遍历每一行的所有单元格子
    for c in row:
        # 将每个单元格的 value 值添加列表 res_text 中
        data.append(c.value)
# 使用zip将title和excepted打包成dict属性
    case = dict(zip(title,data))
    case_data.append(case )
print(case_data)

    
</code></pre>
<h1 id="七-提供一个封装好的openpyxl类方法直接调用即可在-excel-表中-读取-写入数据">七、提供一个封装好的openpyxl类方法，直接调用即可在 excel 表中 读取 / 写入数据</h1>
<pre><code class="language-python"># -*- -*- -*-  -*-  -*-  -*-  -*-  -*-  
# -*- coding: utf-8 -*-                                         
#  @Time   : 2020/08/02
#  @File    : Excel_R&amp;W_demo.py
# -*- -*- -*-  -*-  -*-  -*-  -*-  -*-
import openpyxl

class Excel:
    def __init__(self,workbook_name,sheet_name):
        self.workbook_name = workbook_name
        self.sheet_name = sheet_name

    def read_excel(self):
        # 1、将指定 excel 文件加载到一个工作簿对象中
        wb = openpyxl.load_workbook(self.workbook_name)
        # 2、选择文件中的表单【sheet表名】
        sheet = wb[self.sheet_name]
        res = list(sheet.rows)

        '''获取第一行的单元格'''
        title = []
        # 遍历第一行单元格所有数据并添加到列表中
        for tag in res[0]:
            title.append(tag.value)
        case_data = []
        '''遍历除了第一行以外的所有行'''
        for row in res[1:]:
            data = []
            # 遍历每一行的所有单元格子
            for c in row:
                # 将每个单元格的 value 值添加列表 res_text 中
                data.append(c.value)
                # 使用zip将title和excepted打包成dict属性
            case = dict(zip(title, data))
            case_data.append(case)
        return case_data


    def write_excel(self,row,column,value):
        # 1、将指定 excel 文件加载到一个工作簿对象中
        wb = openpyxl.load_workbook(self.workbook_name)
        # 2、选择文件中的表单【sheet表名】
        sheet = wb[self.sheet_name]
        # 3、根据行号、列号输入value值
        sheet.cell(row=1,column=1,value=&quot;张三&quot;)
        # 4、保存为文件
        wb.save(self.workbook_name)


if __name__ == '__main__':
    excel = Excel(&quot;jzq_openpyxl.xlsx&quot;,&quot;login&quot;)
    res = excel.read_excel()
    print(res)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins环境搭建（Windows下配置流程）]]></title>
        <id>https://17603845963.github.io/post/jenkins-huan-jing-da-jian-windows-xia-pei-zhi-liu-cheng/</id>
        <link href="https://17603845963.github.io/post/jenkins-huan-jing-da-jian-windows-xia-pei-zhi-liu-cheng/">
        </link>
        <updated>2020-09-03T11:50:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="jenkins-是什么">Jenkins 是什么？</h1>
<p><strong>Jenkins是一个用java语言开发的开源的持续集成框架，使开发和运维从繁杂和重复的操作中解脱出来，专注于更为重要的业务逻辑实现上，其主要功能是监视重复工作的执行，有点类似于windows系统中的定时任务，不过Jenkins的功能更加强大，里面集成了很多插件，也可以自己写插件集成进去。Jenkins是开源CI&amp;CD软件领导者， 提供超过1000个插件来支持构建、部署、自动化， 满足任何项目的需要。</strong></p>
<hr>
<h1 id="前置条件需配置jdk环境">前置条件：需配置JDK环境 ！！！</h1>
<ul>
<li>
<h1 id="windows环境下jdk安装操作步骤"><a href="https://blog.csdn.net/weixin_43184774/article/details/106140147">Windows环境下JDK安装操作步骤</a></h1>
</li>
</ul>
<h1 id="windows系统下安装jenkins">windows系统下安装Jenkins</h1>
<ul>
<li>
<h1 id="jenkins安装包下载地址httpswwwjenkinsiozhdownload"><a href="https://www.jenkins.io/zh/download/">jenkins安装包下载地址：https://www.jenkins.io/zh/download/</a></h1>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200803111034315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li>
<h1 id="点击下载后的-msi-文件双击进行安装">点击下载后的 msi 文件，双击进行安装<img src="https://img-blog.csdnimg.cn/20200803094058856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h1>
</li>
<li>
<h1 id="点击-next">点击 Next</h1>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200803094135974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="一张张放图太麻烦了-汇总了一下">一张张放图太麻烦了 汇总了一下</h1>
<p><img src="https://img-blog.csdnimg.cn/20200803122448480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><img src="https://img-blog.csdnimg.cn/20200803122931886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="第九步安装结束后在浏览器输入">第九步安装结束后，在浏览器输入：</h1>
<h1 id="主机ip自定义的端口号1270017878-或者-localhost7878">主机ip+自定义的端口号：127.0.0.1:7878 或者 localhost:7878</h1>
<ul>
<li>
<h1 id="首次登录需要粘贴管理员密码在提示的目录下寻找">★★★★★ 首次登录需要粘贴管理员密码【在提示的目录下寻找】</h1>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200803130816895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200803131508345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<ul>
<li>
<h1 id="至此jenkins环境就搭建好了学习部署自己的脚本叭">至此，jenkins环境就搭建好了！！！学习部署自己的脚本叭</h1>
</li>
</ul>
<h1 id="jenkins学习-部署自己的第一个脚本一"><a href="https://blog.csdn.net/J_____Q/article/details/107324408">Jenkins学习--部署自己的第一个脚本（一）</a></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python+UnitTest+UnitTestReport输出美化版测试报告]]></title>
        <id>https://17603845963.github.io/post/pythonunittestunittestreport-shu-chu-mei-hua-ban-ce-shi-bao-gao/</id>
        <link href="https://17603845963.github.io/post/pythonunittestunittestreport-shu-chu-mei-hua-ban-ce-shi-bao-gao/">
        </link>
        <updated>2020-09-03T11:50:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="最近在研究-htmltestrunner">最近在研究 HTMLTestRunner ，</h1>
<h1 id="无意间在-github-发现了一套新的-unittest-测试报告生成模块">无意间在 GitHub 发现了一套新的 UnitTest 测试报告生成模块</h1>
<h1 id="附上github地址unittestreport-测试报告生成器">附上GitHub地址：<a href="https://github.com/musen123/UnitTestReport">UnitTesTReport 测试报告生成器</a></h1>
<h1 id="发现这是一位腾讯课堂-柠檬版的讲师不愧是柠檬班">发现这是一位腾讯课堂--柠檬版的讲师（不愧是柠檬班，🐂🍺）</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200801165903366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="废话不多说下面开始实操图解">废话不多说，下面开始实操+图解</h1>
<hr>
<h1 id="一-新建一个-test001py-文件">一、新建一个 test001.py 文件</h1>
<pre><code class="language-python">import unittest


class TestMethod(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    '''第一条用例'''
    def test_001(self):
        pass


if __name__ == '__main__':
    unittest.main()
</code></pre>
<h1 id="二-同目录下新建一个-testsuitepy-文件">二、同目录下新建一个 testsuite.py 文件</h1>
<pre><code class="language-python"># 导入 unittest 类
import unittest
# 从unittestreport模块导入 TestRunner 类
from unittestreport import TestRunner
# 导入测试用例类
from testcases.test001 import TestMethod

# 先用suite套件存储用例【存储测试用例的容器】
suite = unittest.TestSuite()
# 创建一个加载器,寻找所有的用例【方法】
loader = unittest.TestLoader()
# 加载所有的用例
suite.addTest(loader.loadTestsFromTestCase(TestMethod))

# 新版生成测试报告代码
runner = TestRunner(suite,
                    filename=&quot;test001.html&quot;,
                    report_dir=r&quot;D:\PyCharm_Community\testcases&quot;,
                    title='测试报告',
                    tester='X X X',
                    desc=&quot;X X X 的测试执行结果&quot;,
                    templates=1)
runner.run()
</code></pre>
<h1 id="三-运行-testsuitepy文件打开生成的测试报告html页面">三、运行 testsuite.py文件，打开生成的测试报告Html页面</h1>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200801170856844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS 7 下的 Docker初识+安装配置]]></title>
        <id>https://17603845963.github.io/post/centos-7-xia-de-docker-chu-shi-an-zhuang-pei-zhi/</id>
        <link href="https://17603845963.github.io/post/centos-7-xia-de-docker-chu-shi-an-zhuang-pei-zhi/">
        </link>
        <updated>2020-09-03T11:49:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker-配置国内加速器加速镜像下载"><a href="https://www.cnblogs.com/atuotuo/p/6264800.html">Docker - 配置国内加速器加速镜像下载</a></h1>
<hr>
<h1 id="docker-能做什么">Docker 能做什么？</h1>
<ul>
<li>
<h1 id="搭建测试环境">搭建测试环境</h1>
</li>
<li>
<h1 id="搭建各类基础服务">搭建各类基础服务</h1>
</li>
<li>
<h1 id="搭建测试执行环境">搭建测试执行环境</h1>
</li>
</ul>
<hr>
<h1 id="centos-7-下的-docker-的安装最新版">CentOS 7 下的 Docker 的安装【最新版】</h1>
<h1 id="下载安装运行就三条命令">★ ★ ★ 下载安装运行就三条命令 ★ ★ ★</h1>
<pre><code class="language-python">'''更新现有的yum包 :''' 
sudo yam update
'''执行docker安装脚本'''
curl -sSL https://get.docker.com/ | sh
'''启动docker服务'''
sudo service docker start
</code></pre>
<hr>
<h1 id="docker的基本使用命令">Docker的基本使用命令</h1>
<hr>
<h3 id="镜像管理命令">镜像管理命令 :</h3>
<hr>
<blockquote>
<ol>
<li>
<p>docker pull {image_name} (拉取镜像)</p>
</li>
<li>
<p>docker push {image_name} (推送镜像)</p>
</li>
<li>
<p>docker images (查看当前机器的所有镜像)</p>
</li>
<li>
<p>docker rmi {image_name} (删除当前机器的一个镜像)</p>
</li>
<li>
<p>docker tag {source_images_name:tag your_image_name:tag}为一个镜像打tag</p>
</li>
<li>
<p>docker save busybox &gt; busybox.tar</p>
</li>
<li>
<p>docker load &lt; busybox.tar.gz</p>
</li>
</ol>
</blockquote>
<h3 id="容器管理命令">容器管理命令</h3>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker run --name={your_name} --d {image_name}</td>
<td style="text-align:left">(运行容器)</td>
</tr>
<tr>
<td style="text-align:left">docker ps -s -a</td>
<td style="text-align:left">{查看当前所有容器}</td>
</tr>
<tr>
<td style="text-align:left">docker stop {container_name}</td>
<td style="text-align:left">(停止容器)</td>
</tr>
<tr>
<td style="text-align:left">docker kill (container_name)</td>
<td style="text-align:left">{杀死容器}</td>
</tr>
<tr>
<td style="text-align:left">docker rm -f {container_name}</td>
<td style="text-align:left">(容器如果运行中，-f强制删除容器；容器不在运行，可不加-f)</td>
</tr>
</tbody>
</table>
<h3 id="查信息相关命令">查信息相关命令</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker logs -f</td>
<td style="text-align:left">{容器名称} (查看容器日志)</td>
</tr>
<tr>
<td style="text-align:left">docker info</td>
<td style="text-align:left">(查看docker服务的信息)</td>
</tr>
<tr>
<td style="text-align:left">docker inspect</td>
<td style="text-align:left">{容器名称} (查看容器的元数据)</td>
</tr>
</tbody>
</table>
<h3 id="与容器交互的命令">与容器交互的命令</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker exec -it  {容器名称} bash</td>
<td style="text-align:left">进入容器，exec的意思是在容器中运行一个命令。如果是bash 并且指定了-it就会打开容器的shell交互</td>
</tr>
<tr>
<td style="text-align:left">docker cp {container:name}:{container_path} {host_path}</td>
<td style="text-align:left">把宿主机上的一个文件copy到容器中</td>
</tr>
</tbody>
</table>
<h3 id="容器运行命令的一些参数-docker-run">容器运行命令的一些参数 （docker run）</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker run  --name</td>
<td style="text-align:left">指定容器名称</td>
</tr>
<tr>
<td style="text-align:left">docker run  -d</td>
<td style="text-align:left">后台运行</td>
</tr>
<tr>
<td style="text-align:left">docker run      -port</td>
<td style="text-align:left">指定端口映射规则</td>
</tr>
<tr>
<td style="text-align:left">docker run   --network</td>
<td style="text-align:left">指定容器运行的网路模式</td>
</tr>
<tr>
<td style="text-align:left">docker run   -v</td>
<td style="text-align:left">指定需要挂载的数据卷</td>
</tr>
<tr>
<td style="text-align:left">docker run    -env</td>
<td style="text-align:left">指定需要传递给容器的环境变量</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
</feed>