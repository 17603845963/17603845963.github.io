<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://17603845963.github.io</id>
    <title>井 sir 的私人博客</title>
    <updated>2020-09-03T11:43:26.531Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://17603845963.github.io"/>
    <link rel="self" href="https://17603845963.github.io/atom.xml"/>
    <subtitle>一位秀发茂密的测试工程师</subtitle>
    <logo>https://17603845963.github.io/images/avatar.png</logo>
    <icon>https://17603845963.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 井 sir 的私人博客</rights>
    <entry>
        <title type="html"><![CDATA[Web自动化测试常用Api]]></title>
        <id>https://17603845963.github.io/post/web-zi-dong-hua-ce-shi-chang-yong-api/</id>
        <link href="https://17603845963.github.io/post/web-zi-dong-hua-ce-shi-chang-yong-api/">
        </link>
        <updated>2020-09-03T11:42:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-最简单的web自动化脚本">一、最简单的Web自动化脚本</h2>
<pre><code class="language-python"># 导入浏览器驱动
from selenium import webdriver
# 创建一个驱动
driver = webdriver.Chrome()
# 窗口最大化
driver.maximize_window()
# 设置窗口大小
driver.set_window_size(720,800)
# 打开url
driver.get(url='http://www.baidu.com')
# 退出浏览器
driver.quit()
</code></pre>
<h2 id="二-元素定位控件">二、元素定位控件</h2>
<pre><code class="language-python"># 通过id定位元素
driver.find_element_by_id()
# 通过class_name定位元素
driver.find_element_by_class_name()
# 通过超链文本定位元素
driver.find_element_by_link_text()
# 通过部分超链文本定位元素
driver.find_element_by_partial_link_text()
# 通过标签名定位元素
driver.find_element_by_tag_name()
# 通过xpath定位元素
driver.find_element_by_xpath()
# 通过css定位元素
driver.find_element_by_css_selector()
</code></pre>
<h2 id="三-元素定位后执行动作">三、元素定位后执行动作</h2>
<pre><code class="language-python"># 定位元素并点击
driver.find_element_by_id(&quot;id属性值&quot;).click()
# 定位元素并输入文本
driver.find_element_by_id(&quot;id属性值&quot;).send_keys()
# 定位元素并清空文本值
driver.find_element_by_id(&quot;id属性值&quot;).clear()
# 打印定位元素获取其文本值
print(driver.find_element_by_id(&quot;id属性值&quot;).text)
# 打印定位元素获取其尺寸大小
print(driver.find_element_by_id(&quot;id属性值&quot;).size)
# 打印当前页面的标题（页面的书签名）
print(driver.title)
# 打印当前页面的URL信息
print(driver.current_url)
# 判断控件是否出现
driver.find_element_by_xpath(&quot;&quot;).is_displayed()
# 获取控件内输入的内容：
driver.find_element_by_xpath(&quot;&quot;).get_attribute('value')

</code></pre>
<h2 id="四-弹窗事件">四、弹窗事件</h2>
<pre><code class="language-python"># 页面弹窗Alert情景
# 1、只有确定按钮
# 2、有确定按钮和取消按钮
# 3、有输入框、确定按钮和取消按钮

# 光标移动到页面弹窗上，并输入内容：我同意
driver.switch_to.alert.send_keys(&quot;我同意&quot;)
# 打印弹窗内容文本信息
print(driver.switch_to.alert.text)
# 光标移动至页面弹窗，点击确定按钮
driver.switch_to.alert.accept()
# 光标移动至页面弹窗，点击取消按钮
driver.switch_to.alert.dismiss()
</code></pre>
<h2 id="五-模拟鼠标事件">五、模拟鼠标事件</h2>
<pre><code class="language-python"># 模拟鼠标事件需导入 ActionChains 模块
from selenium.webdriver.common.action_chains import ActionChains

# 初始化一个驱动
driver = webdriver.Chrome()
# 变量接收 定位到的元素
ele = driver.find_element_by_id(&quot;xxxx&quot;)
# 显示等待3秒（等待元素加载）
time.sleep(3)

# 【使用场景】触碰元素后操作子级模块
# 模拟鼠标移动到 所定位到的元素
ActionChains(driver).move_to_element(ele).perform()
# 定位到子级控件进行操作
driver.find_element_by_xpath(&quot;.xxxx&quot;).click()

# 【使用场景】模拟鼠标在元素控件右击
ActionChains().context_click(ele).perform()

# 【使用场景】模拟鼠标在元素控件双击
ActionChains().double_click().perform()

</code></pre>
<h2 id="六-模拟键盘操作事件">六、模拟键盘操作事件</h2>
<pre><code class="language-python"># 模拟键盘操作事件
from selenium.webdriver.common.keys import Keys

# 单个键盘录入
# 场景1：输入的 bilibili 需回退一格，键盘按下Backspace
driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.BACK_SPACE)
# 场景2：输入的 bilibili 后面增加空格，键盘按下 Space
driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.SPACE)

'''更多场景，ctrl+左击 Keys即可查询'''

# 多键盘录入：如：ctrl+A ，ctrl+C ，ctrl+V
driver.find_element_by_css_selector(&quot;.bg.s_ipt_wr.quickdelete-wrap input#kw&quot;).send_keys(Keys.CONTROL,&quot;a&quot;)
driver.find_element_by_css_selector(&quot;.bg.s_ipt_wr.quickdelete-wrap input#kw&quot;).send_keys(Keys.CONTROL,&quot;c&quot;)
driver.find_element_by_css_selector(&quot;.bg.s_ipt_wr.quickdelete-wrap input#kw&quot;).send_keys(Keys.CONTROL,&quot;v&quot;)
</code></pre>
<h2 id="七-三种等待时间">七、三种等待时间</h2>
<pre><code class="language-python"># 导入显式等待模块
import time
# 导入隐式等待模块
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC

# 1、页面停留三秒
time.sleep(3)
# 2、最大等待时间10秒，如3秒找到元素则执行后续代码
driver.implicitly_wait(10)
# 3、最大等待时间为10秒，每0.5秒找一次，直到元素出现
ele = WebDriverWait(driver,10,0.5).until(EC.presence_of_element_located((By.XPATH,'//xxx')))
ele.send_keys(&quot;123456&quot;)
# 3、最大等待时间为10秒，每0.5秒找一次，直到元素没有出现
ele = WebDriverWait(driver,10,0.5).until_not(EC.presence_of_element_located((By.XPATH,'//xxx')))
ele.send_keys(&quot;123456&quot;)

</code></pre>
<h2 id="八-多窗口切换事件">八、多窗口切换事件</h2>
<pre><code class="language-python"># 打印所有窗口的句柄【返回值类型：list】
print(driver.window_handles)
# 打印当前窗口的句柄
print(driver.current_window_handle)

# 窗口切换 [list：下标是从 0 开始]
driver.switch_to.window(driver.window_handles[1])
# 如需关闭当前窗口，使用 .close（）
driver.close()
</code></pre>
<h2 id="九-iframe-控件处理">九、iframe ：控件处理</h2>
<pre><code class="language-python"># 有id、name属性值，如：id=x-urs
driver.switch_to.frame(&quot;x-urs&quot;)

# 通过xpath/css先定位到iframe，然后切换
fra = driver.find_element_by_xpath(&quot;//div[@id='x-urs']&quot;)
driver.switch_to.frame(fra)

# 从子级iframe切换到父级iframe
driver.switch_to.parent_frame()

# 从任何层级的iframe切换到主文档
driver.switch_to.default_content()
</code></pre>
<h2 id="十-select类处理下拉框代码">十、Select类处理下拉框代码：</h2>
<pre><code class="language-python"># 导入Select类
from selenium.webdriver.support.select import Select

# Select类下选择下拉列表项
# 定位下拉框，用变量s接收元素定位信息
s = driver.find_element_by_id(&quot;xxxxx&quot;)

# 通过下拉列表文本值选择
Select(s).select_by_visible_text(&quot;下拉列表文本值&quot;)

# 通过下拉列表value属性值选择
Select(s).select_by_value(&quot;5&quot;)

# 通过下拉列表index属性值选择【从0开始】
Select(s).select_by_index(3)
</code></pre>
<h2 id="十一-时间选择框处理代码">十一、时间选择框处理代码：</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200623183215401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<pre><code class="language-python"># 时间选择框【yyyy-mm-dd格式】
# 图片中的时间框有 input 标签

# 定位到入住日期控件标签
eleIn = driver.find_element_by_id(&quot;HD_CheckIn&quot;)
# 清空
eleIn.clear()
# 传入对应格式的日期时间
eleIn.send_keys('2020-01-01')

# 定位到退房日期控件标签
eleOut = driver.find_element_by_id(&quot;HD_CheckOut&quot;)
# 清空
eleOut.clear()
# 传入对应格式的日期时间
eleOut.send_keys('2020-01-02')
</code></pre>
<h3 id="ps如果上述操作无法使用sendkeys操纵可以使用第三方-js-取消弹窗特性">【 PS：如果上述操作无法使用sendkeys操纵，可以使用第三方 js 取消弹窗特性】</h3>
<h1 id="具体代码操作请参考我的这篇文章">具体代码操作请参考我的这篇文章：</h1>
<ul>
<li>
<h2 id=""><a href="https://blog.csdn.net/J_____Q/article/details/107194859"><strong>python+selenium：移除时间控件readonly属性，实现send_keys输入</strong></a></h2>
</li>
</ul>
<hr>
<h2 id="十二-截取并保存页面的截图">十二、截取并保存页面的截图</h2>
<pre><code class="language-python"># 截取并保存页面的截图【建议png格式】
driver.get_screenshot_as_file(&quot;D:/路径.png&quot;)
</code></pre>
<hr>
<h2 id="十三-滚动条事件">十三、滚动条事件</h2>
<pre><code class="language-python"># 滚动条拉到底部
js = &quot;var q=document.documentElement.scrollTop=10000&quot;
driver.execute_script(js)

# 滚动条拉到最上面
js = &quot;var q=document.documentElement.scrollTop=0&quot;
driver.execute_script(js)

# 滚动到页面的50%的位置
driver.execute_script(&quot;window.scrollTo(0, document.body.scrollHeight*0.5)&quot;);

#相对当前坐标移动到的坐标
driver.execute_script(&quot;window.scrollBy(0, 900)&quot;);
time.sleep(2)

#移动到绝对坐标
driver.execute_script(&quot;window.scrollTo(0, 1500)&quot;);

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Appium--app自动化常用Api]]></title>
        <id>https://17603845963.github.io/post/appium-app-zi-dong-hua-chang-yong-api/</id>
        <link href="https://17603845963.github.io/post/appium-app-zi-dong-hua-chang-yong-api/">
        </link>
        <updated>2020-09-03T11:41:53.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E4%B8%80-%E5%8A%A8%E4%BD%9C%E4%BA%8B%E4%BB%B6">一、动作事件</a></li>
<li><a href="#%E4%BA%8C-%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96">二、属性获取</a></li>
<li><a href="#%E4%B8%89-swipe%E4%BA%8B%E4%BB%B6">三、swipe事件</a></li>
<li><a href="#%E5%9B%9B-touchaction%E7%B1%BB%E8%AF%A6%E8%A7%A3">四、TouchAction类详解</a></li>
<li><a href="#%E4%BA%94-keyevent%E6%89%8B%E6%9C%BA%E6%8C%89%E9%94%AE%E4%BA%8B%E4%BB%B6">五、keyevent手机按键事件</a></li>
<li><a href="#%E5%85%AD-%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">六、屏幕截图</a></li>
<li><a href="#%E4%B8%83-%E8%BE%93%E5%85%A5%E6%A1%86%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E9%9C%80%E5%88%87%E6%8D%A2appium%E8%BE%93%E5%85%A5%E6%B3%95">七、输入框输入中文【需切换appium输入法】</a></li>
<li><a href="#%E5%85%AB-%E6%AF%8F%E6%AC%A1%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%90%8E%E5%8D%B8%E8%BD%BD%E9%87%8D%E8%A3%85app">八、每次执行代码后卸载重装APP</a></li>
<li><a href="#%E4%B9%9D-toast%E4%BA%8B%E4%BB%B6">九、toast事件</a></li>
</ul>
(Appium--app自动化常用Api汇总)</p>
<h1 id="一-动作事件">一、动作事件</h1>
<pre><code class="language-python"># 先定位元素
ele = driver.find_element_by_id('ccn.xiaochuankeji.tieba:id/title')
# 点击事件
ele.click()
# 文本输入事件
ele.sendkeys()
# 清空文本数据
ele.clear()

</code></pre>
<hr>
<h1 id="二-属性获取">二、属性获取</h1>
<pre><code class="language-python"># 获取当前设备的屏幕分辨率[页面滑动会使用相关]
height = driver.get_window_size()['height'] # 获取屏幕高度
width = driver.get_window_size()['width'] # 获取屏幕的宽度
print('该手机的屏幕分辨率为：{}*{}'.format(height,width))

# 先定位元素
ele = driver.find_element_by_id('ccn.xiaochuankeji.tieba:id/title')
# 获取控件文本信息
text = ele.text
# 获取当前窗口的Activity名
activity = driver.current_activity
# 获取控件的属性值
attibute = ele.get_attribute('className')
# 判断控件是否可用
ele.is_enabled()
# 判断控件是否显示
ele.is_displayed()
</code></pre>
<hr>
<h1 id="三-swipe事件">三、swipe事件</h1>
<pre><code class="language-python">'''
# 页面滑动
driver.swipe(startX,startY,endX,endY,time)
在持续时间内，完成起始坐标--终止坐标的移动操作
'''
# 【起始、终止坐标不变】实现控件点击操作
driver.swipe(500,200,500,200,100)
# 实现【短时】点击操作
driver.swipe(500,1000,500,200,100)
# 实现点击长按操作
driver.swipe(500,1000,500,200,3000)

'''
适应于各个分辨率手机的swipe操作事件
'''
# 获取当前设备的屏幕分辨率
height = driver.get_window_size()['height'] # 获取屏幕高度
width = driver.get_window_size()['width'] # 获取屏幕的宽度
# 通过控件：bounds属性值/分辨率=百分比
driver.swipe(width*0.5,height*0.8,width*0.5,height*0.5)
</code></pre>
<hr>
<h1 id="四-touchaction类详解">四、TouchAction类详解</h1>
<pre><code class="language-python"># 先导入TouchAction类【触摸事件】
from appium.webdriver.common.touch_action import TouchAction
# 使用.tap()方法点击，再使用perform()方法释放动作

# 控件点击
ele = driver.find_element_by_id('ccn.xiaochuankeji.tieba:id/title')
TouchAction(driver).tap(ele).perform()

# 坐标点击
TouchAction(driver).tap(x=200,y=500).perform()

# press + release 实现点击事件
TouchAction(driver).press(x=500,y=300).release().perform()
# long_press + release 实现长按点击事件
TouchAction(driver).long_press(x=500,y=300,duration=3000).release().perform()
</code></pre>
<hr>
<h1 id="五-keyevent手机按键事件">五、keyevent手机按键事件</h1>
<pre><code class="language-python">'''
五、keyevent手机按键事件
参考博客：https://blog.csdn.net/midux/article/details/80064054
常用手机按键编号：
返回键：4
搜索键：84
回车键：66
退格键：67
'''
driver.keyevent(4)
driver.keyevent(66)
</code></pre>
<hr>
<h1 id="六-屏幕截图">六、屏幕截图</h1>
<pre><code class="language-python">driver.get_screenshot_as_file(&quot;E:/new_file/app.png&quot;)
</code></pre>
<hr>
<h1 id="七-输入框输入中文需切换appium输入法">七、输入框输入中文【需切换appium输入法】</h1>
<pre><code class="language-python"># 给模拟器加各appium自带输入法
desired_caps['unicodeKeyboard'] = 'True'
# 重置当前输入法
desired_caps['resetKeyboard'] = 'True'
</code></pre>
<hr>
<h1 id="八-每次执行代码后卸载重装app">八、每次执行代码后卸载重装APP</h1>
<pre><code class="language-python">'''
使用此项需定义PATH
'''
PATH = lambda p: os.path.abspath(os.path.join(os.path.dirname(__file__), p))
# 每一次执行完app，卸载app，清除所有的数据【如：已登录状态】
desired_caps['fullReset'] = True
# 每一次卸载后去文件绝对路径找到apk文件进行安装
desired_caps['app'] = PATH('E:/newapp/app.apk')
</code></pre>
<hr>
<h1 id="九-toast事件">九、toast事件</h1>
<pre><code class="language-python"># 导入显式等待模块
import time
# 导入隐式等待模块
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC

# 如需要操作toast控件【一闪而过的，如：登陆成功提示】
desired_caps['automationName'] = 'Uiautomator2'
# 最大等待时间为10秒，每0.5秒找一次，直到元素没有出现
ele = WebDriverWait(driver,10,0.5).until_not(
    EC.presence_of_element_located(('xpath','//*contains(@text,&quot;登陆成功&quot;)')))
print(ele.text)
</code></pre>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最新亲测Jmeter代理服务器抓取Web端和APP端请求步骤详解]]></title>
        <id>https://17603845963.github.io/post/zui-xin-qin-ce-jmeter-dai-li-fu-wu-qi-zhua-qu-web-duan-he-app-duan-qing-qiu-bu-zou-xiang-jie/</id>
        <link href="https://17603845963.github.io/post/zui-xin-qin-ce-jmeter-dai-li-fu-wu-qi-zhua-qu-web-duan-he-app-duan-qing-qiu-bu-zou-xiang-jie/">
        </link>
        <updated>2020-09-03T11:41:20.000Z</updated>
        <content type="html"><![CDATA[<p><strong>最近研究Jmeter做接口方面的测试工作，<br>
遇到代理服务器开启后无法抓取到请求的现象，<br>
而且Web页面也加载不出来<br>
网上的博客教程太坑啦，索性自己写一篇</strong><br>
<ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#%E4%B8%80-jmeter-%E9%9C%80%E8%A6%81%E7%9A%84%E9%85%8D%E7%BD%AE">一、 Jmeter 需要的配置</a></li>
<li><a href="#%E4%BA%8C-web%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86">二、Web端设置代理</a><br>
*
<ul>
<li><a href="#1-chrome-%E6%B5%8F%E8%A7%88%E5%99%A8">1. Chrome 浏览器</a></li>
<li><a href="#2-%E7%81%AB%E7%8B%90%E6%B5%8F%E8%A7%88%E5%99%A8">2. 火狐浏览器</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89-web%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E6%88%90%E5%8A%9Fjmeter%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8">三、Web浏览器代理设置成功，jmeter代理服务启动</a></li>
<li><a href="#%E5%9B%9B-%E5%AE%89%E8%A3%85ca%E8%AF%81%E4%B9%A6">四、安装CA证书</a><br>
*
<ul>
<li><a href="#1-%E6%89%BE%E5%88%B0%E6%96%87%E4%BB%B6%E5%A4%B9-bin-%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84-ca-%E8%AF%81%E4%B9%A6%E6%96%87%E4%BB%B6">1. 找到文件夹 bin 目录下的 CA 证书文件</a></li>
<li><a href="#2-%E4%BB%A5chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%BA%E4%BE%8B">2. 以Chrome浏览器为例：</a></li>
</ul>
</li>
<li><a href="#%E4%BA%94-jmeter%E4%BB%A3%E7%90%86%E6%8A%93%E5%8F%96app%E6%89%8B%E6%9C%BA%E7%AB%AF%E7%9A%84%E8%AF%B7%E6%B1%82">五、jmeter代理抓取APP手机端的请求</a><br>
*
<ul>
<li><a href="#1-%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85-jmeter-%E7%9A%84ca%E8%AF%81%E4%B9%A6">1、手机安装 jmeter 的CA证书</a></li>
<li><a href="#2-%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">2、手机代理设置</a>
<ul>
<li><a href="#%E6%89%8B%E6%9C%BA%E4%B8%8E%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E5%90%8C%E4%B8%80%E7%BD%91%E6%AE%B5%E7%9A%84%E7%BD%91%E7%BB%9C%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%E8%AF%B4%E7%AC%AC%E4%B8%80%E9%81%8D">手机与电脑连接同一网段的网络！！！【重要的事说第一遍】</a></li>
<li><a href="#%E6%89%8B%E6%9C%BA%E4%B8%8E%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E5%90%8C%E4%B8%80%E7%BD%91%E6%AE%B5%E7%9A%84%E7%BD%91%E7%BB%9C%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%E8%AF%B4%E7%AC%AC%E4%BA%8C%E9%81%8D">手机与电脑连接同一网段的网络！！！【重要的事说第二遍】</a></li>
<li><a href="#%E6%89%8B%E6%9C%BA%E4%B8%8E%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E5%90%8C%E4%B8%80%E7%BD%91%E6%AE%B5%E7%9A%84%E7%BD%91%E7%BB%9C%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%E8%AF%B4%E7%AC%AC%E4%B8%89%E9%81%8D">手机与电脑连接同一网段的网络！！！【重要的事说第三遍】</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%A5%BD%E4%BA%86%E5%BC%80%E5%A7%8B%E6%84%89%E5%BF%AB%E7%9A%84%E6%8A%93%E5%8C%85%E5%90%A7">好了，开始愉快的抓包吧！！！</a></li>
</ul>
(Jmeter代理服务器抓取Web端和APP端请求步骤)</p>
<hr>
<h2 id="一-jmeter-需要的配置">一、 Jmeter 需要的配置</h2>
<ul>
<li>测试计划→添加→线程→线程组</li>
<li>测试计划→添加→监听器→查看结果树</li>
<li>测试计划→添加→非测试元件→HTTP代理服务器<br>
HTTP代理服务器设置项：<br>
1、端口号设置：如6666，不建议设置80/8080等常见端口号<br>
2、目标控制器选择：测试计划&gt;线程组，这样请求就自动填入线程组中<img src="https://img-blog.csdnimg.cn/20200718002916701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<h2 id="二-web端设置代理">二、Web端设置代理</h2>
<h4 id="1-chrome-浏览器">1. Chrome 浏览器</h4>
<p>URL 输入：chrome://settings/system<br>
<img src="https://img-blog.csdnimg.cn/20200718003959524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718004250624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<hr>
<h4 id="2-火狐浏览器">2. 火狐浏览器</h4>
<p><img src="https://img-blog.csdnimg.cn/20200718004556836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718004649761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718004755640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<h2 id="三-web浏览器代理设置成功jmeter代理服务启动">三、Web浏览器代理设置成功，jmeter代理服务启动</h2>
<p><img src="https://img-blog.csdnimg.cn/20200718005640707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718005505382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<h2 id="四-安装ca证书">四、安装CA证书</h2>
<p>当执行到这一步你的线程组没有抓到请求，那么恭喜你，你也掉进了和我一样的坑<br>
【访问HTTPS需要导入证书，否则URL会显示：不安全等字样】</p>
<p><strong>解决方法：</strong></p>
<h4 id="1-找到文件夹-bin-目录下的-ca-证书文件">1. 找到文件夹 bin 目录下的 CA 证书文件</h4>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/2020071801012579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="2-以chrome浏览器为例">2. 以Chrome浏览器为例：</h4>
<p>① URL 中输入：chrome://settings/?search=%E8%AF%81%E4%B9%A6<br>
② 进入设置→搜索框输入：证书→回车后跳转页面<br>
<img src="https://img-blog.csdnimg.cn/20200718010641951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718010844143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718010929752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718011046556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img-blog.csdnimg.cn/20200718011330831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718011430239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020071801154273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200718011451565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<h2 id="五-jmeter代理抓取app手机端的请求">五、jmeter代理抓取APP手机端的请求</h2>
<h4 id="1-手机安装-jmeter-的ca证书">1、手机安装 jmeter 的CA证书</h4>
<ul>
<li>jmeter 文件 bin 目录下的 ApacheJMeterTemporaryRootCA.crt 证书通过QQ发给自己的手机上<br>
<img src="https://img-blog.csdnimg.cn/20200718014414180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718014653432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
<li><strong>手机端点开文件→选择用其它应用打开→选择证书安装程序</strong><br>
<img src="https://img-blog.csdnimg.cn/20200718015740794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718015944199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718020029628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
<li><strong>进入设置，搜索栏输入：用户凭据</strong><br>
<img src="https://img-blog.csdnimg.cn/20200718020326646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718020551797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<h4 id="2-手机代理设置">2、手机代理设置</h4>
<h5 id="手机与电脑连接同一网段的网络重要的事说第一遍">手机与电脑连接同一网段的网络！！！【重要的事说第一遍】</h5>
<h5 id="手机与电脑连接同一网段的网络重要的事说第二遍">手机与电脑连接同一网段的网络！！！【重要的事说第二遍】</h5>
<h5 id="手机与电脑连接同一网段的网络重要的事说第三遍">手机与电脑连接同一网段的网络！！！【重要的事说第三遍】</h5>
<ul>
<li>手机连接WiFi，设置手动代理</li>
<li>主机名：cmd 输入ipconfig 查看本机 ip 地址并输入</li>
<li>端口号：与 jmeter 代理服务器设置的端口号保持一致【我的是6666】<br>
<img src="https://img-blog.csdnimg.cn/2020071802100581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718021736382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<hr>
<hr>
<h1 id="好了开始愉快的抓包吧">好了，开始愉快的抓包吧！！！</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fiddler工具之模拟弱网测试]]></title>
        <id>https://17603845963.github.io/post/fiddler-gong-ju-zhi-mo-ni-ruo-wang-ce-shi/</id>
        <link href="https://17603845963.github.io/post/fiddler-gong-ju-zhi-mo-ni-ruo-wang-ce-shi/">
        </link>
        <updated>2020-09-03T11:40:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="fiddler-配置">Fiddler 配置：</h1>
<ul>
<li>Rules &gt; Performance &gt; Simulate Modem Speeds 开启弱网设置</li>
<li>Rules &gt;  Customize Rules &gt; Fiddler ScriptEditor</li>
<li>ctrl + F &gt; 输入查询关键字：simulate &gt; 自定义数据上行下载延迟</li>
<li>保存 Fiddler ScriptEditor 脚本修改项</li>
<li>
<h3 id="注意-确保-simulate-modem-speeds-为勾选状态">【 注意 】确保 Simulate Modem Speeds 为勾选状态</h3>
</li>
<li>
<h3 id="修改完毕后重启-fiddler">修改完毕后重启 Fiddler</h3>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200718132640820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020071813333734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200718133622222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-python">if (m_SimulateModem) {
    // Delay sends by 300ms per KB uploaded.
// 表示每 1KB的数据上传就有300毫秒的延迟
    oSession[&quot;request-trickle-delay&quot;] = &quot;400&quot;; 
    // Delay receives by 150ms per KB downloaded.
// 表示每 1KB的数据下载就有150毫秒的延迟
    oSession[&quot;response-trickle-delay&quot;] = &quot;200&quot;; 
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200718134239913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jmeter之常用元件用法]]></title>
        <id>https://17603845963.github.io/post/jmeter-zhi-chang-yong-yuan-jian-yong-fa/</id>
        <link href="https://17603845963.github.io/post/jmeter-zhi-chang-yong-yuan-jian-yong-fa/">
        </link>
        <updated>2020-09-03T11:40:11.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E4%B8%80-jmeter%E7%9A%84%E6%96%AD%E8%A8%80%E4%BD%BF%E7%94%A8">一、Jmeter的断言使用</a><br>
*
<ul>
<li><a href="#%E5%A2%9E%E5%8A%A0%E6%96%AD%E8%A8%80">增加断言:</a></li>
<li><a href="#apply-to%E5%BA%94%E7%94%A8%E8%8C%83%E5%9B%B4">apply to(应用范围):</a></li>
<li><a href="#%E6%B5%8B%E8%AF%95%E5%AD%97%E6%AE%B5">测试字段：</a></li>
<li><a href="#%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99">模式匹配规则:</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%B1%E8%B4%A5%E6%B6%88%E6%81%AF">自定义失败消息</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C-%E5%8E%8B%E6%B5%8B%E7%BB%93%E6%9E%9C%E8%81%9A%E5%90%88%E6%8A%A5%E5%91%8A%E5%88%86%E6%9E%90">二、压测结果聚合报告分析</a><br>
*
<ul>
<li><a href="#%E6%96%B0%E5%A2%9E%E8%81%9A%E5%90%88%E6%8A%A5%E5%91%8A">新增聚合报告:</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89-jmeter%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F">三、Jmeter用户自定义变量</a><br>
*
<ul>
<li><a href="#1%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E5%85%83%E4%BB%B6">1.添加用户自定义变量元件</a></li>
<li><a href="#2%E5%BC%95%E7%94%A8%E6%96%B9%E5%BC%8F-xxx-%E5%9C%A8%E6%8E%A5%E5%8F%A3%E5%8F%98%E9%87%8F%E4%B8%AD%E4%BD%BF%E7%94%A8">2.引用方式 ${xxx} ，在接口变量中使用</a></li>
<li><a href="#3%E5%8E%9F%E5%A7%8B%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C%E6%A0%91%E5%92%8C%E9%9D%9E%E5%8E%9F%E7%94%9F%E6%9F%A5%E7%9C%8B%E8%A7%A3%E6%9E%90%E7%89%88%E6%9B%B4%E7%9B%B4%E8%A7%82">3.原始查看结果树和非原生查看（解析版更直观）</a></li>
</ul>
</li>
<li><a href="#%E5%9B%9B-jmeter%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0csv%E5%85%83%E4%BB%B6">四、jmeter可变参数CSV元件</a><br>
*
<ul>
<li><a href="#1-%E6%B7%BB%E5%8A%A0csv%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE">1. 添加CSV数据文件设置</a></li>
<li><a href="#2%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87csvtxt-%E6%A0%BC%E5%BC%8F">2.测试数据准备（csv&amp;txt 格式）</a></li>
<li><a href="#3csv%E5%85%83%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%8F%8A%E8%AF%B7%E6%B1%82%E8%B0%83%E7%94%A8%E5%8F%98%E9%87%8F">3.CSV元件设置及请求调用变量</a></li>
<li><a href="#4%E7%BB%93%E6%9E%9C%E6%A0%91%E4%B8%AD%E6%9F%A5%E7%9C%8B%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E5%B7%B2%E8%B0%83%E7%94%A8%E6%96%87%E6%A1%A3%E4%B8%AD%E7%9A%84%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE">4.结果树中查看请求数据【已调用文档中的测试数据】</a></li>
</ul>
</li>
<li><a href="#%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%94%9F%E6%88%90%E8%87%AA%E5%8A%A8%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">【扩展】函数对话框生成自动读取数据的字符串</a></li>
<li><a href="#%E4%BA%94-jmeter%E4%B9%8Bcookie%E7%AE%A1%E7%90%86%E5%99%A8">五、jmeter之Cookie管理器</a></li>
<li><a href="#%E5%85%AD-%E5%90%8C%E6%AD%A5%E5%AE%9A%E6%97%B6%E5%99%A8-%E9%9B%86%E5%90%88%E7%82%B9-synchonizing-timer">六、同步定时器 / 集合点 （Synchonizing Timer）</a></li>
<li><a href="#%E4%B8%83-jpgc-stepping-thread-group-deprecated-%E8%B4%9F%E8%BD%BD%E6%B5%8B%E8%AF%95%E5%85%83%E4%BB%B6">七、jp@gc - Stepping Thread Group (deprecated) 负载测试元件</a></li>
<li><a href="#%E5%85%AB-%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9D%9F%E5%90%8C%E6%97%B6%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A">八、测试结束同时生成测试报告</a></li>
</ul>
(jmeter之常用原件用法解释)</p>
<h1 id="一-jmeter的断言使用">一、Jmeter的断言使用</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/2020072100035264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li>
<h3 id="增加断言">增加断言:</h3>
<p>线程组&gt;添加&gt;断言&gt;响应断言</p>
</li>
<li>
<h3 id="apply-to应用范围">apply to(应用范围):</h3>
<p><strong>Main sample only：</strong><br>
仅当前父取样器进行断言，一般一个请求，如果发一个请求会触发多个，则就有sub</p>
</li>
<li>
<h3 id="测试字段">测试字段：</h3>
<p><strong>响应文本:</strong> 即响应的数据，比如json等文本<br>
<strong>响应代码:</strong> http的响应状态码，比如200、302、404这些<br>
<strong>响应信息:</strong> http响应代码对应的响应信息，例如: OK, Found<br>
<strong>Response Header:</strong> 响应头</p>
</li>
<li>
<h3 id="模式匹配规则">模式匹配规则:</h3>
<p><strong>包括:</strong> 包含在里面就成功<br>
<strong>匹配:</strong> 响应内容完全匹配，不区分大小写<br>
<strong>equals:</strong> 完全匹配，区分大小写</p>
</li>
<li>
<h3 id="自定义失败消息">自定义失败消息</h3>
<p>请求断言失败，查看结果树 <strong>Assertion result</strong> 中显示当前自定义报错文本<br>
<img src="https://img-blog.csdnimg.cn/20200721224002561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
</li>
</ul>
<hr>
<h1 id="二-压测结果聚合报告分析">二、压测结果聚合报告分析</h1>
<ul>
<li>
<h3 id="新增聚合报告">新增聚合报告:</h3>
线程组 -&gt; 添加 -&gt; 监听器 -&gt; 聚合报告 (Aggregate Report)<img src="https://img-blog.csdnimg.cn/20200721001653556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200721234038258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<hr>
<h1 id="三-jmeter用户自定义变量">三、Jmeter用户自定义变量</h1>
<p><strong>作用：<br>
很多变量在全局都有使用，如测试数据修改，一处定义，多处使用</strong></p>
<h3 id="1添加用户自定义变量元件">1.添加用户自定义变量元件</h3>
<ol>
<li><strong>线程组 &gt; 添加 &gt;  配置元件 &gt;  用户定义的变量</strong><br>
<img src="https://img-blog.csdnimg.cn/20200721221742397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ol>
<h3 id="2引用方式-xxx-在接口变量中使用">2.引用方式 ${xxx} ，在接口变量中使用</h3>
<p><img src="https://img-blog.csdnimg.cn/20200721222447495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200721222648869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="3原始查看结果树和非原生查看解析版更直观">3.原始查看结果树和非原生查看（解析版更直观）</h3>
<p><img src="https://img-blog.csdnimg.cn/2020072122361917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200721223855204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<h1 id="四-jmeter可变参数csv元件">四、jmeter可变参数CSV元件</h1>
<p><strong>使用场景：压测/性测的时候，往往需要准备许多的测试数据，如账号等<br>
解决方法：通过jmeter读取CSV或TXT文本参数进行测试</strong></p>
<h3 id="1-添加csv数据文件设置">1. 添加CSV数据文件设置</h3>
<p>线程组 &gt;  添加 &gt;  配置原件 &gt; CSV data set config （csv数据文件设置）<br>
<img src="https://img-blog.csdnimg.cn/20200721224926350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="2测试数据准备csvtxt-格式">2.测试数据准备（csv&amp;txt 格式）</h3>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200721225840955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="3csv元件设置及请求调用变量">3.CSV元件设置及请求调用变量</h3>
<p><img src="https://img-blog.csdnimg.cn/20200721231904590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200721231952884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="4结果树中查看请求数据已调用文档中的测试数据">4.结果树中查看请求数据【已调用文档中的测试数据】</h3>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200721232155249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="扩展函数对话框生成自动读取数据的字符串">【扩展】函数对话框生成自动读取数据的字符串</h1>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/2020072618362598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<p><img src="https://img-blog.csdnimg.cn/20200726183215231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200726184412305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<hr>
<h1 id="五-jmeter之cookie管理器">五、jmeter之Cookie管理器</h1>
<p>Cookie管理器大概是jmeter最简单的元件了，只需要添加，无需其他操作即可使用<br>
Cookie管理器添加后，自动获取并保存用户登录后的Cookie信息，多用户的Cookie也是一一对应<br>
<img src="https://img-blog.csdnimg.cn/20200726190058105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<hr>
<h1 id="六-同步定时器-集合点-synchonizing-timer">六、同步定时器 / 集合点 （Synchonizing Timer）</h1>
<p><strong>模拟并发场景使用此元件：</strong><br>
<img src="https://img-blog.csdnimg.cn/20200726191558182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200726195345251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<h1 id="七-jpgc-stepping-thread-group-deprecated-负载测试元件">七、jp@gc - Stepping Thread Group (deprecated) 负载测试元件</h1>
<p><img src="https://img-blog.csdnimg.cn/2020080410515656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200804110316266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="八-测试结束同时生成测试报告">八、测试结束同时生成测试报告</h1>
<pre><code class="language-python">'''
jmeter -n -t 【这里把要测试的脚本拉进来】 -l 【测试报告的文件名xxx.csv】 -e -o 【路径】
'''
# 示例：
jmeter -n -t E:\Jmeter_study_file\jmeter_study.jmx -l jmeterTestResult.csv -e -o E:\reporter_file
# 参数:
# -e : 在脚本运行结束后生成html报告
#-o  : 保存html报告的路径，此文件夹必须为空或者不存在
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200804155717983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python实现 md5(md5( )+salt) 双重加密]]></title>
        <id>https://17603845963.github.io/post/python-shi-xian-md5md5-salt-shuang-chong-jia-mi/</id>
        <link href="https://17603845963.github.io/post/python-shi-xian-md5md5-salt-shuang-chong-jia-mi/">
        </link>
        <updated>2020-09-03T11:35:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="此篇博客部分内容参考自">此篇博客部分内容参考自：</h1>
<h1 id=""><a href="https://blog.csdn.net/weixin_43486863/article/details/83273559?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159841441919195264503575%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=159841441919195264503575&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-83273559.pc_ecpm_v3_pc_rank_v3&amp;utm_term=python%E5%AE%9E%E7%8E%B0%E5%8F%8C%E9%87%8Dmd5%E5%8A%A0%E5%AF%86&amp;spm=1018.2118.3001.4187"><strong>Python实现md5二次及多次加盐加密</strong></a></h1>
<hr>
<hr>
<h1 id="代码参考">代码参考：</h1>
<pre><code class="language-python">from hashlib import md5

#  post传入的参数
params = &quot;123456&quot;  
#  加密后需拼接的 salt（有的叫access_key_secret）  
salt = &quot;HNNJJjjmjfsdkmfkdd&quot;

def q():
	m = md5()
	m.update(params.encode('utf8'))
	sign1 = m.hexdigest()
	return sign1

def w():
	m = md5()
	m.update((q() + salt).encode('utf8'))
	sign2 = m.hexdigest()
	return sign2

print(w())
</code></pre>
<hr>
<hr>
<hr>
<h1 id="有的时候传入的参数有时间戳可参考">有的时候传入的参数有时间戳，可参考：</h1>
<pre><code class="language-python">import time

# 生成10位数的时间戳
timestamp = int(round(time.time()))

# 如果需要13位或者别的，可以自定义
timestamp1 = int(round(time.time() * 1000))

print(timestamp)
print(timestamp1)
</code></pre>
<ul>
<li>
<h1 id="以下为打印结果">以下为打印结果：</h1>
<pre><code class="language-python">C:\Users\86176\AppData\Local\Programs\Python\Python36\python.exe D:xxxx/test.py
1598429366
1598429365704

Process finished with exit code 0
</code></pre>
</li>
</ul>
]]></content>
    </entry>
</feed>