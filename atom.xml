<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://17603845963.github.io</id>
    <title>井 Sir 的私人博客</title>
    <updated>2020-09-06T10:42:55.222Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://17603845963.github.io"/>
    <link rel="self" href="https://17603845963.github.io/atom.xml"/>
    <subtitle>一位秀发茂密的测试工程师</subtitle>
    <logo>https://17603845963.github.io/images/avatar.png</logo>
    <icon>https://17603845963.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 井 Sir 的私人博客</rights>
    <entry>
        <title type="html"><![CDATA[python基础 --- getattr( )和setattr( )方法的使用]]></title>
        <id>https://17603845963.github.io/post/python-ji-chu-getattr-he-setattr-fang-fa-de-shi-yong/</id>
        <link href="https://17603845963.github.io/post/python-ji-chu-getattr-he-setattr-fang-fa-de-shi-yong/">
        </link>
        <updated>2020-09-06T10:41:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-内建函数-getattr">一、 内建函数 ： getattr ( )</h1>
<pre><code class="language-python">'''
getattr( ) : 获取属性（动态获取某个属性的值）
getattr(&quot;对象或者类名&quot; , &quot;属性名称&quot; ，&quot;当没有此属性需要提供过的默认值&quot; )
'''


class Phone:

    def __init__(self,brand):
    	# 定义一个类属性
        self.brand = brand

    def call(self):
    	# 定义一个实例属性
        self.num = '120'
        print(&quot;正在打电话&quot;)

    def send_message(self):
        print(&quot;正在发消息&quot;)


iphone = Phone('OPPO')

# 这里的brand打印OPPO是因为上面传入了类属性
print(getattr(iphone,&quot;brand&quot;))

# 这里的num之所以打印110而不是120，是因为没有调用call()方法
# 类.类属性 √     类.实例属性 X
print(getattr(iphone,&quot;num&quot;,&quot;110&quot;)))


# 打印结果
C:\Users\86176\AppData\Local\Programs\Python\Python36\python.exe &quot;D:/PyCharm_Community/CSDN_blog/getattr+setattr/getattr( ).py&quot;
OPPO
110

Process finished with exit code 0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[推荐软件测试(python)的B站宝藏视频]]></title>
        <id>https://17603845963.github.io/post/tui-jian-gei-zi-xue-ruan-jian-ce-shi-pythonde-b-zhan-bao-cang-shi-pin/</id>
        <link href="https://17603845963.github.io/post/tui-jian-gei-zi-xue-ruan-jian-ce-shi-pythonde-b-zhan-bao-cang-shi-pin/">
        </link>
        <updated>2020-09-04T11:58:13.000Z</updated>
        <content type="html"><![CDATA[<hr>
<hr>
<h1 id="️️️-bv19t411m7uu">❤️❤️❤️ BV19t411m7uU</h1>
<ul>
<li>
<h1 id="python基础入门up主是个声音特别好听的小姐姐">python基础入门【up主是个声音特别好听的小姐姐】</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200904200329592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
</li>
</ul>
<h1 id="bv1bv41167a4">💛💛💛 BV1bV41167a4</h1>
<ul>
<li>
<h1 id="pytest框架unittest进阶版框架">Pytest框架【unittest进阶版框架】</h1>
<img src="https://img-blog.csdnimg.cn/20200904201237485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<h1 id="">💚💚💚</h1>
<h1 id="-2">💙💙💙</h1>
<h1 id="-3">💜💜💜</h1>
<h1 id="-4">🖤🖤🖤</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[推荐给自学软件测试（python）的宝藏视频]]></title>
        <id>https://17603845963.github.io/post/tui-jian-gei-zi-xue-ruan-jian-ce-shi-pythonde-bao-cang-shi-pin/</id>
        <link href="https://17603845963.github.io/post/tui-jian-gei-zi-xue-ruan-jian-ce-shi-pythonde-bao-cang-shi-pin/">
        </link>
        <updated>2020-09-04T11:58:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="️-bv19t411m7uu">❤️ BV19t411m7uU</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200904200329592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="">💛</h1>
<h1 id="-2">💚</h1>
<h1 id="-3">💙</h1>
<h1 id="-4">💜</h1>
<h1 id="-5">🖤</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github下载与使用]]></title>
        <id>https://17603845963.github.io/post/github-xia-zai-yu-shi-yong/</id>
        <link href="https://17603845963.github.io/post/github-xia-zai-yu-shi-yong/">
        </link>
        <updated>2020-09-03T12:27:31.000Z</updated>
        <content type="html"><![CDATA[<p>官网下载真的是好慢好慢。。附上网盘链接<br>
windows（64位）<br>
<strong>链接：https://pan.baidu.com/s/1bRndwnVtCY_wE1A26Xtzeg<br>
提取码：yvpk</strong></p>
<p><strong>1.下载完毕后就傻瓜式默认一步步安装（保持默认选项即可）<br>
2.安装完毕后在桌面点击鼠标右键，显示如下：</strong><br>
<img src="https://img-blog.csdnimg.cn/20200503144240423.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>3.验证Git是否安装成功：</strong><br>
①win+R→cmd→打开命令提示符<br>
②输入：git --version<br>
③显示如下信息即为安装成功<br>
<img src="https://img-blog.csdnimg.cn/20200503144724713.png" alt="在这里插入图片描述" loading="lazy"><br>
<strong>4.需要在官网注册Git账号：https://github.com</strong><br>
注册账号时请退出电脑上的杀毒软件，如：电脑管家、360等。。。<br>
看不懂可以使用谷歌浏览器登录，右键翻译网页还是挺好用的</p>
<p><strong>5.配置sshkey：</strong><br>
桌面鼠标右键点击【Git Bash Here】</p>
<p>①回到根目录下：</p>
<pre><code class="language-bash">cd /
</code></pre>
<p>②生成key(跟注册的邮箱地址)：</p>
<pre><code class="language-bash">ssh -keygen -t rsa -C &quot;xxxxx@163.com/qq.com&quot;
</code></pre>
<p>③进入.ssh目录(生成了两个 id_rsa 文件)：</p>
<pre><code class="language-bash">cd ~/.ssh
</code></pre>
<p>④获取ssh-key：</p>
<pre><code class="language-bash">cat id_rsa.pub
</code></pre>
<p>#此时生成了一大串字符，全部复制<br>
<img src="https://img-blog.csdnimg.cn/20200503151220229.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>⑤复制ssh-key，登录Github，点击个人信息【倒三角】进入setting设置</strong><br>
<img src="https://img-blog.csdnimg.cn/20200503151538749.png" alt="在这里插入图片描述" loading="lazy"><br>
<strong>⑥选择【SSH and GPG keys】并新建ssh key</strong><br>
<img src="https://img-blog.csdnimg.cn/20200503151719882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<strong>⑦点击创建后，ssh key配置完成</strong><br>
<img src="https://img-blog.csdnimg.cn/20200503152113557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Python发送Get/Post请求]]></title>
        <id>https://17603845963.github.io/post/shi-yong-python-fa-song-getpost-qing-qiu/</id>
        <link href="https://17603845963.github.io/post/shi-yong-python-fa-song-getpost-qing-qiu/">
        </link>
        <updated>2020-09-03T12:26:49.000Z</updated>
        <content type="html"><![CDATA[<p>需要导入requests模块：</p>
<pre><code class="language-python">import requests
</code></pre>
<p>①发送 get 请求：</p>
<pre><code class="language-python"># get 请求
url = &quot;http://www.baidu.com&quot;
res = requests.get(url) # ↑返回一个消息实体（响应头、报文、状态码等）
print(res)
print(&quot;响应头&quot;,res.headers)
print(&quot;响应状态码&quot;,res.status_code)
print(&quot;响应正文&quot;,res.text)
</code></pre>
<p>②发送post请求：</p>
<pre><code class="language-python"># post 请求
url='https://xxxx.com'
data={&quot;username&quot;:&quot;test&quot;,&quot;pwd&quot;:&quot;test&quot;}
res=requests.post(url,data)
print(&quot;响应头&quot;,res.headers)
print(&quot;响应状态码&quot;,res.status_code)
print(&quot;响应cookies&quot;,res.cookies) # 登录成功后才会显示
print(&quot;cookie的value值&quot;,res.cookies['JSESSIONID(key属性名)']) # 类字典形式通过key取值
print(&quot;响应正文1&quot;,res.text)    # 返回类型为 html 、xml、json 均可使用
print(&quot;响应正文2&quot;,res.json())  # 只有json类型的返回值才可以使用.json
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python中For循环语句的使用（配合各种问题）]]></title>
        <id>https://17603845963.github.io/post/python-zhong-for-xun-huan-yu-ju-de-shi-yong-pei-he-ge-chong-wen-ti/</id>
        <link href="https://17603845963.github.io/post/python-zhong-for-xun-huan-yu-ju-de-shi-yong-pei-he-ge-chong-wen-ti/">
        </link>
        <updated>2020-09-03T12:26:23.000Z</updated>
        <content type="html"><![CDATA[<p><strong>For 循环语句的使用场景：</strong></p>
<p>1.现有列表L=【5，9，4，7，3】，求元素和？</p>
<pre><code class="language-python">L = [5,6,9,3,7]
result = 0
for item in L :
    result += item
print(result)
</code></pre>
<p>2.求出1-100的整数和？</p>
<pre><code class="language-python"># 计算1-100的和
count = 0
# range函数，取左不取右
for i in range(1,101) :
    count += i
print(count)
</code></pre>
<p>3.打印如下图案：</p>
<pre><code class="language-python">*
* *
* * *
* * * *
* * * * *
# i 打印5行
for i in range(1,6):
	# 每行多打印 i-1 个*号
    for j in range(i-1):
        print(&quot;* &quot;,end=&quot;&quot;)
    print(&quot;*&quot;)
</code></pre>
<p>4.遍历字典中的key，value值</p>
<pre><code class="language-python">d = {&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:26 }
for item in d :
	# 遍历所有的key值
	print(item)
	# 根据遍历的key值获取对应的value值
	print(d[item])
</code></pre>
<p>5.遍历列表所有的元素</p>
<pre><code class="language-python">L = [5,6,9,7,3]
# len（L）为5，range函数默认从0开始
for i in range(len(L)):
    print(L[i])
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android  App 稳定性测试工具--Monkey]]></title>
        <id>https://17603845963.github.io/post/android-app-wen-ding-xing-ce-shi-gong-ju-monkey/</id>
        <link href="https://17603845963.github.io/post/android-app-wen-ding-xing-ce-shi-gong-ju-monkey/">
        </link>
        <updated>2020-09-03T12:26:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="稳定性测试">稳定性测试</h2>
<p>稳定性测试是指对应用进行长时间的操作，检测功能是否稳定。一般稳定性测试时间是 N*12小时。项目中稳定测试多采用<strong>monkey</strong>，进行随机测试。</p>
<p>测试方法：<br>
<strong>1、跑monkey</strong></p>
<p>adb shell monkey -p packageName【包名】 -v -v -v --throttle 500 -s 4 --ignore-crashes --ignore-timeouts --ignore-security-exceptions times(次数) |logcat -v time &gt; e:\log\monkeyLog.txt（日志保存路径）</p>
<p>参数：<br>
-p ： 指点包名,如果要指定多个包名，需多个-p参数<br>
-v ： 指定日志的详细程度，取值1-3，三个 -v 详细程度最高<br>
--throttle ： 指定用户操作时的时延，单位毫秒<br>
-s ： 指定伪随机数生成器的seed值，取值1-10，当seed相同，产生的事件序列也相同<br>
--ignore-crashes ： 指应用程序崩溃，monkey依然发送事件，直到事件数完成<br>
--ignore-timeouts： 指应用程序发生ANR，monkey依然发送事件，直到事件数完成<br>
--ignore-security-exceptions： 指应用程序发生许可错误，monkey依然发送事件，直到事件数完成<br>
|logcat -v time： 给monkey命令的日志加上时间</p>
<p><strong>2、日志解析</strong><br>
稳定性测试是否能通过在于日志，需要把日志里的报错日志搜索出来，开发定位问题。<br>
1）、用Notepad++打开日志<br>
2）、ctrl + F<br>
<img src="https://img-blog.csdnimg.cn/2020050614195694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>3）、分析exception日志，定位问题。</strong></p>
<p>————————————————<br>
版权声明：本文为CSDN博主「Kitten_336368」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>
原文链接：https://blog.csdn.net/xiaomaoxiao336368/article/details/84887948</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据库---MySQL的命令行命令（在已创建的表中添加主键、自增、默认值）]]></title>
        <id>https://17603845963.github.io/post/shu-ju-ku-mysql-de-ming-ling-xing-ming-ling-zai-yi-chuang-jian-de-biao-zhong-tian-jia-zhu-jian-zi-zeng-mo-ren-zhi/</id>
        <link href="https://17603845963.github.io/post/shu-ju-ku-mysql-de-ming-ling-xing-ming-ling-zai-yi-chuang-jian-de-biao-zhong-tian-jia-zhu-jian-zi-zeng-mo-ren-zhi/">
        </link>
        <updated>2020-09-03T12:21:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-mysql命令行创建一个订单表">1、MySQL命令行创建一个订单表</h2>
<pre><code class="language-powershell">mysql&gt; create table order_table(
    -&gt; order_id int not null,
    -&gt; price float(10,2),
    -&gt; user_id int);
</code></pre>
<p>创建成功，效果如下：</p>
<pre><code class="language-powershell">mysql&gt; desc order_table;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| order_id | int(11)     | NO   |     | NULL    |       |
| price    | float(10,2) | YES  |     | NULL    |       |
| user_id  | int(11)     | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+
3 rows in set
</code></pre>
<hr>
<hr>
<h2 id="2-为已建好的表中-order_id-添加主键">2、为已建好的表中 order_id 添加主键</h2>
<pre><code class="language-python">mysql&gt; alter table order_table add primary key(order_id);
</code></pre>
<p>添加成功，效果如下：</p>
<pre><code class="language-python">mysql&gt; desc order_table;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| order_id | int(11)     | NO   | PRI | NULL    |       |
| price    | float(10,2) | YES  |     | NULL    |       |
| user_id  | int(11)     | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+
3 rows in set
</code></pre>
<hr>
<hr>
<h2 id="3-为已建好的表中-order_id-添加自增">3、为已建好的表中 order_id 添加自增</h2>
<pre><code class="language-python">mysql&gt; alter table order_table modify order_id int auto_increment;
</code></pre>
<p>添加成功，效果如下：</p>
<pre><code class="language-python">mysql&gt; desc order_table;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| order_id | int(11)     | NO   | PRI | NULL    | auto_increment |
| price    | float(10,2) | YES  |     | NULL    |                |
| user_id  | int(11)     | YES  |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
3 rows in set
</code></pre>
<hr>
<hr>
<h2 id="4-为已建好的表中-price-添加默认值">4、为已建好的表中 price 添加默认值：</h2>
<pre><code class="language-python">mysql&gt; alter table order_table modify price float(10,2) default '1234';
</code></pre>
<p>添加成功，效果如下：</p>
<pre><code class="language-python">mysql&gt; desc order_table;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| order_id | int(11)     | NO   | PRI | NULL    | auto_increment |
| price    | float(10,2) | YES  |     | 1234.00 |                |
| user_id  | int(11)     | YES  |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
3 rows in set
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据库---mysql 之 常用命令行命令]]></title>
        <id>https://17603845963.github.io/post/shu-ju-ku-mysql-zhi-chang-yong-ming-ling-xing-ming-ling/</id>
        <link href="https://17603845963.github.io/post/shu-ju-ku-mysql-zhi-chang-yong-ming-ling-xing-ming-ling/">
        </link>
        <updated>2020-09-03T12:21:01.000Z</updated>
        <content type="html"><![CDATA[<p><strong>1、展示当前所有的数据库：show databases;</strong></p>
<pre><code class="language-python">mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| jzq_test           |
| mtx_1              |
| mysql              |
| performance_schema |
| study              |
| sys                |
+--------------------+
7 rows in set
</code></pre>
<p><strong>2、选中某个数据库（相当于鼠标点击选中）：use sql_name;</strong><br>
<strong>【使用  数据库名.表名 可以省略 use 数据库名的操作】</strong></p>
<pre><code class="language-python">mysql&gt; use jzq_test;
Database changed
</code></pre>
<p><strong>3、展示选中数据库下所有的表：show tables;</strong></p>
<pre><code class="language-python">mysql&gt; show tables;
+--------------------+
| Tables_in_jzq_test |
+--------------------+
| order_table        |
| user_info          |
| user_info_table    |
+--------------------+
3 rows in set

</code></pre>
<p><strong>4、展示表结构：desc table_name;</strong></p>
<pre><code class="language-python">mysql&gt; desc user_info;
+-----------+-------------+------+-----+----------+----------------+
| Field     | Type        | Null | Key | Default  | Extra          |
+-----------+-------------+------+-----+----------+----------------+
| user_id   | int(11)     | NO   | PRI | NULL     | auto_increment |
| user_name | char(10)    | YES  |     | NULL     |                |
| password  | varchar(10) | YES  |     | 12345555 |                |
| user_nick | varchar(10) | YES  |     | NULL     |                |
| card_num  | bigint(20)  | YES  |     | NULL     |                |
+-----------+-------------+------+-----+----------+----------------+
5 rows in set
</code></pre>
<p><strong>5、查看表数据信息：select * from table_name;</strong></p>
<pre><code class="language-python">mysql&gt; select * from user_info;
+---------+-----------+----------+-----------+---------------+
| user_id | user_name | password | user_nick | card_num      |
+---------+-----------+----------+-----------+---------------+
|       1 | zhangsan  | 12345555 | zhangsan  |  123456789111 |
|       2 | lisi      | 12345555 | ls        | 1234567891222 |
|       3 | wangwu    | 12345555 | ww        | 1234567891333 |
|       4 | zhaoliu   | 12345555 | zl        | 1234567891444 |
+---------+-----------+----------+-----------+---------------+
4 rows in set
</code></pre>
<p><strong>6、创建数据库：create database sql_name;</strong></p>
<pre><code class="language-python">mysql&gt; create database test_sql;
Query OK, 1 row affected

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| jzq_test           |
| mtx_1              |
| mysql              |
| performance_schema |
| study              |
| sys                |
| test_sql           |
+--------------------+
8 rows in set

</code></pre>
<p><strong>7、创建表:</strong></p>
<pre><code class="language-python">mysql&gt; create table test_sql_table(
    -&gt; t_id int zerofill unsigned not null primary key auto_increment,
    -&gt; t_name varchar(20),
    -&gt; t_num int(10));

//创建成功，展示如下：
mysql&gt; desc test_sql_table;
+--------+---------------------------+------+-----+---------+----------------+
| Field  | Type                      | Null | Key | Default | Extra          |
+--------+---------------------------+------+-----+---------+----------------+
| t_id   | int(10) unsigned zerofill | NO   | PRI | NULL    | auto_increment |
| t_name | varchar(20)               | YES  |     | NULL    |                |
| t_num  | int(10)                   | YES  |     | NULL    |                |
+--------+---------------------------+------+-----+---------+----------------+
3 rows in set
</code></pre>
<p><strong>8、删除表：drop table table_name;</strong></p>
<pre><code class="language-python">//删表之前：
mysql&gt; show tables;
+--------------------+
| Tables_in_jzq_test |
+--------------------+
| order_table        |
| test_sql_table     |
| user_info          |
| user_info_table    |
+--------------------+
4 rows in set

//执行删表操作：
mysql&gt; drop table order_table;

//删表后结果显示；
mysql&gt; show tables;
+--------------------+
| Tables_in_jzq_test |
+--------------------+
| test_sql_table     |
| user_info          |
| user_info_table    |
+--------------------+
3 rows in set
</code></pre>
<p><strong>9、删数据库：drop database sql_name;</strong></p>
<pre><code class="language-python">//删库之前：
mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| jzq_test           |
| mtx_1              |
| mysql              |
| performance_schema |
| study              |
| sys                |
| test_sql           |
+--------------------+
8 rows in set

//执行删库命令：
mysql&gt; drop database test_sql;

//删库后展示结果：
mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| jzq_test           |
| mtx_1              |
| mysql              |
| performance_schema |
| study              |
| sys                |
+--------------------+
7 rows in set
</code></pre>
<p><strong>10、修改表名：alter table  old_table  rename  to  new_table;</strong></p>
<pre><code class="language-python"># 当前表名
mysql&gt; show tables;
+---------------+
| Tables_in_jzq |
+---------------+
| old_table     |
+---------------+
1 row in set

# 执行修改表名的命令
mysql&gt; alter table old_table rename  to new_table;
Query OK, 0 rows affected

# 展示修改后的表名
mysql&gt; show tables;
+---------------+
| Tables_in_jzq |
+---------------+
| new_table     |
+---------------+
1 row in set
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[亲测mysql不是内部或外部命令,也不是可运行的程序或批处理文件解决办法]]></title>
        <id>https://17603845963.github.io/post/qin-ce-mysql-bu-shi-nei-bu-huo-wai-bu-ming-ling-ye-bu-shi-ke-yun-xing-de-cheng-xu-huo-pi-chu-li-wen-jian-jie-jue-ban-fa/</id>
        <link href="https://17603845963.github.io/post/qin-ce-mysql-bu-shi-nei-bu-huo-wai-bu-ming-ling-ye-bu-shi-ke-yun-xing-de-cheng-xu-huo-pi-chu-li-wen-jian-jie-jue-ban-fa/">
        </link>
        <updated>2020-09-03T12:20:13.000Z</updated>
        <content type="html"><![CDATA[<p>初学mysql的时候，正式环境不能瞎玩，只能自己在Navicat上创建了数据库，<br>
但是想用<strong>命令行连接自己本机的数据库</strong>却发生了下面的问题，偏偏  CSDN 上有<br>
太多的烂贴了（明明照做了问题却没有解决）为了帮助初学者入门mysql数据库，<br>
特意开了此帖，希望可以帮到你们！</p>
<hr>
<h2 id="正文开始">正文开始：</h2>
<h1 id="命令行本地连接自己的数据库出现以下问题">命令行本地连接自己的数据库，出现以下问题：</h1>
<p><strong>'mysql' 不是内部或外部命令，也不是可运行的程序或批处理文件。</strong></p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200606092240206.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="原因是因为环境变量没有配置好">原因是因为环境变量没有配置好：</h2>
<p>【我猜大部分人都不会记得自己数据库安装的路径】<br>
<strong>以下方式可获取mysql的安装路径：</strong></p>
<hr>
<h1 id="1-组合键-winr输入servicesmsc">1、组合键 <strong>win+R</strong>，输入：<strong>services.msc</strong></h1>
<h2 id=""><img src="https://img-blog.csdnimg.cn/20200606092017468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h2>
<h1 id="2-找到mysql服务右键属性复制可执行文件路径">2、找到mysql服务，右键→属性→复制可执行文件路径</h1>
<p><strong>【复制路径到 \bin 即可】<br>
【复制路径到 \bin 即可】<br>
【复制路径到 \bin 即可】</strong><br>
如我的路径：C:\Program Files\MySQL\MySQL Server 5.7\bin</p>
<h2 id="-2"><img src="https://img-blog.csdnimg.cn/20200606093239416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200606093459166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h2>
<hr>
<h1 id="3-右击此电脑属性高级系统设置环境变量系统变量path">3、右击【此电脑】→属性→高级系统设置→环境变量→系统变量→PATH</h1>
<h3 id="将下面两段分别添加到path的变量中">♥ 将下面<strong>两段分别</strong>添加到path的变量中！！！</h3>
<h2 id="1-path-中新建添加-mysql-的-bin-目录路径"><strong>① path 中新建添加 mysql 的 bin 目录路径</strong></h2>
<h2 id="注意放上自己的bin目录">注意放上自己的bin目录！！！</h2>
<pre><code class="language-python">C:\Program Files\MySQL\MySQL Server 5.7\bin
</code></pre>
<h2 id="2复制下方内容至path变量中"><strong>②复制下方内容至path变量中：</strong></h2>
<pre><code class="language-python">%MYSQL_HOME%\bin
</code></pre>
<h2 id="-3"><img src="https://img-blog.csdnimg.cn/20200606095832183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h2>
<hr>
<h1 id="4-重新打开命令行输入">4、重新打开命令行，输入：</h1>
<p><strong>连接本地数据库不需要  -h+端口号</strong></p>
<pre><code class="language-python">mysql -uroot -p
Enter password:
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200606100431649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<strong>本地数据库连接成功！！！！</strong></p>
<h2 id="至于数据库的一些基本命令行命令我也写有学习笔记有需要的可以参考一下">至于数据库的一些基本命令行命令我也写有学习笔记，有需要的可以参考一下</h2>
]]></content>
    </entry>
</feed>