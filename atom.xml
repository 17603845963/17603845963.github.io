<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://17603845963.github.io</id>
    <title>井 sir 的私人博客</title>
    <updated>2020-09-03T11:49:55.282Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://17603845963.github.io"/>
    <link rel="self" href="https://17603845963.github.io/atom.xml"/>
    <subtitle>一位秀发茂密的测试工程师</subtitle>
    <logo>https://17603845963.github.io/images/avatar.png</logo>
    <icon>https://17603845963.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 井 sir 的私人博客</rights>
    <entry>
        <title type="html"><![CDATA[CentOS 7 下的 Docker初识+安装配置]]></title>
        <id>https://17603845963.github.io/post/centos-7-xia-de-docker-chu-shi-an-zhuang-pei-zhi/</id>
        <link href="https://17603845963.github.io/post/centos-7-xia-de-docker-chu-shi-an-zhuang-pei-zhi/">
        </link>
        <updated>2020-09-03T11:49:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker-配置国内加速器加速镜像下载"><a href="https://www.cnblogs.com/atuotuo/p/6264800.html">Docker - 配置国内加速器加速镜像下载</a></h1>
<hr>
<h1 id="docker-能做什么">Docker 能做什么？</h1>
<ul>
<li>
<h1 id="搭建测试环境">搭建测试环境</h1>
</li>
<li>
<h1 id="搭建各类基础服务">搭建各类基础服务</h1>
</li>
<li>
<h1 id="搭建测试执行环境">搭建测试执行环境</h1>
</li>
</ul>
<hr>
<h1 id="centos-7-下的-docker-的安装最新版">CentOS 7 下的 Docker 的安装【最新版】</h1>
<h1 id="下载安装运行就三条命令">★ ★ ★ 下载安装运行就三条命令 ★ ★ ★</h1>
<pre><code class="language-python">'''更新现有的yum包 :''' 
sudo yam update
'''执行docker安装脚本'''
curl -sSL https://get.docker.com/ | sh
'''启动docker服务'''
sudo service docker start
</code></pre>
<hr>
<h1 id="docker的基本使用命令">Docker的基本使用命令</h1>
<hr>
<h3 id="镜像管理命令">镜像管理命令 :</h3>
<hr>
<blockquote>
<ol>
<li>
<p>docker pull {image_name} (拉取镜像)</p>
</li>
<li>
<p>docker push {image_name} (推送镜像)</p>
</li>
<li>
<p>docker images (查看当前机器的所有镜像)</p>
</li>
<li>
<p>docker rmi {image_name} (删除当前机器的一个镜像)</p>
</li>
<li>
<p>docker tag {source_images_name:tag your_image_name:tag}为一个镜像打tag</p>
</li>
<li>
<p>docker save busybox &gt; busybox.tar</p>
</li>
<li>
<p>docker load &lt; busybox.tar.gz</p>
</li>
</ol>
</blockquote>
<h3 id="容器管理命令">容器管理命令</h3>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker run --name={your_name} --d {image_name}</td>
<td style="text-align:left">(运行容器)</td>
</tr>
<tr>
<td style="text-align:left">docker ps -s -a</td>
<td style="text-align:left">{查看当前所有容器}</td>
</tr>
<tr>
<td style="text-align:left">docker stop {container_name}</td>
<td style="text-align:left">(停止容器)</td>
</tr>
<tr>
<td style="text-align:left">docker kill (container_name)</td>
<td style="text-align:left">{杀死容器}</td>
</tr>
<tr>
<td style="text-align:left">docker rm -f {container_name}</td>
<td style="text-align:left">(容器如果运行中，-f强制删除容器；容器不在运行，可不加-f)</td>
</tr>
</tbody>
</table>
<h3 id="查信息相关命令">查信息相关命令</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker logs -f</td>
<td style="text-align:left">{容器名称} (查看容器日志)</td>
</tr>
<tr>
<td style="text-align:left">docker info</td>
<td style="text-align:left">(查看docker服务的信息)</td>
</tr>
<tr>
<td style="text-align:left">docker inspect</td>
<td style="text-align:left">{容器名称} (查看容器的元数据)</td>
</tr>
</tbody>
</table>
<h3 id="与容器交互的命令">与容器交互的命令</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker exec -it  {容器名称} bash</td>
<td style="text-align:left">进入容器，exec的意思是在容器中运行一个命令。如果是bash 并且指定了-it就会打开容器的shell交互</td>
</tr>
<tr>
<td style="text-align:left">docker cp {container:name}:{container_path} {host_path}</td>
<td style="text-align:left">把宿主机上的一个文件copy到容器中</td>
</tr>
</tbody>
</table>
<h3 id="容器运行命令的一些参数-docker-run">容器运行命令的一些参数 （docker run）</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker run  --name</td>
<td style="text-align:left">指定容器名称</td>
</tr>
<tr>
<td style="text-align:left">docker run  -d</td>
<td style="text-align:left">后台运行</td>
</tr>
<tr>
<td style="text-align:left">docker run      -port</td>
<td style="text-align:left">指定端口映射规则</td>
</tr>
<tr>
<td style="text-align:left">docker run   --network</td>
<td style="text-align:left">指定容器运行的网路模式</td>
</tr>
<tr>
<td style="text-align:left">docker run   -v</td>
<td style="text-align:left">指定需要挂载的数据卷</td>
</tr>
<tr>
<td style="text-align:left">docker run    -env</td>
<td style="text-align:left">指定需要传递给容器的环境变量</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MeterSphere的部署安装]]></title>
        <id>https://17603845963.github.io/post/metersphere-de-bu-shu-an-zhuang/</id>
        <link href="https://17603845963.github.io/post/metersphere-de-bu-shu-an-zhuang/">
        </link>
        <updated>2020-09-03T11:48:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="metersphere-是一站式的开源企业级持续测试平台">MeterSphere 是一站式的开源企业级持续测试平台，</h1>
<h1 id="涵盖测试跟踪-接口测试-性能测试-团队协作等功能">涵盖测试跟踪、接口测试、性能测试、团队协作等功能，</h1>
<h1 id="兼容jmeter-等开源标准">兼容JMeter 等开源标准，</h1>
<h1 id="有效助力开发和测试团队充分利用云弹性进行高度可扩展的自动化测试">有效助力开发和测试团队充分利用云弹性进行高度可扩展的自动化测试，</h1>
<h1 id="加速高质量软件的交付">加速高质量软件的交付。</h1>
<h1 id="metersphere-学习介绍文档"><a href="https://metersphere.io/docs/">MeterSphere 学习介绍文档</a></h1>
<hr>
<ul>
<li>
<h3 id="操作系统-任何支持-docker-的-linux-x64">操作系统: 任何支持 Docker 的 Linux x64</h3>
</li>
<li>
<h3 id="cpu内存-2核4g最小">CPU/内存: 2核4G（最小）</h3>
</li>
<li>
<h3 id="磁盘空间-20g">磁盘空间: 20G</h3>
</li>
<li>
<h3 id="可访问互联网">可访问互联网</h3>
</li>
</ul>
<hr>
<h1 id="一-界面展示">一 、界面展示：</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200812105019645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<h1 id="二-部署安装">二、部署安装</h1>
<ul>
<li>
<h3 id="执行安装脚本">执行安装脚本</h3>
</li>
<li>
<h3 id="以-root-用户-ssh-登录目标服务器-执行如下命令">以 root 用户 ssh 登录目标服务器, 执行如下命令</h3>
<blockquote>
<p>curl -sSL https://github.com/metersphere/metersphere/releases/latest/download/quick_start.sh | sh</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="三-登录">三、登录</h1>
<ul>
<li>
<h3 id="安装成功后通过浏览器访问如下页面登录-metersphere">安装成功后，通过浏览器访问如下页面登录 MeterSphere</h3>
<strong>地址: http://目标服务器IP地址:8081<br>
用户名: admin<br>
密码: metersphere</strong></li>
</ul>
<h3 id="您可以使用命令-msctl-status-检查服务运行情况">您可以使用命令 'msctl status' 检查服务运行情况.</h3>
<hr>
<h1 id="四-功能">四、功能</h1>
<p><img src="https://img-blog.csdnimg.cn/20200812105419959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200812105438617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200812105454609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200812105510346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jmeter --- time函数生成时间戳]]></title>
        <id>https://17603845963.github.io/post/jmeter-time-han-shu-sheng-cheng-shi-jian-chuo/</id>
        <link href="https://17603845963.github.io/post/jmeter-time-han-shu-sheng-cheng-shi-jian-chuo/">
        </link>
        <updated>2020-09-03T11:47:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-元件位置">一、元件位置</h1>
<ul>
<li>
<h3 id="tools-函数助手对话框">Tools  →   函数助手对话框</h3>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200817174724841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="二-生成时间戳">二、生成时间戳</h1>
<hr>
<ul>
<li>
<h2 id="1-未作处理的时间戳">1、未作处理的时间戳</h2>
<img src="https://img-blog.csdnimg.cn/20200817175532286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<hr>
<hr>
<ul>
<li>
<h2 id="2-除以1000得到少三位数的时间戳">2、除以1000，得到少三位数的时间戳</h2>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200817175800473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python基础之 zip( ) 实现行列转化]]></title>
        <id>https://17603845963.github.io/post/python-ji-chu-zhi-zip-shi-xian-xing-lie-zhuan-hua/</id>
        <link href="https://17603845963.github.io/post/python-ji-chu-zhi-zip-shi-xian-xing-lie-zhuan-hua/">
        </link>
        <updated>2020-09-03T11:47:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="现在有一个列表如下">现在有一个列表如下：</h2>
<pre><code class="language-python">user_info = [[&quot;name&quot;,&quot;age&quot;,&quot;gender&quot;,&quot;food&quot;],
             [&quot;张三&quot;,&quot;15&quot;,&quot;男&quot;,&quot;吃零食&quot;],
             [&quot;李四&quot;,&quot;25&quot;,&quot;女&quot;,&quot;吃烧烤&quot;],
             [&quot;王五&quot;,&quot;30&quot;,&quot;男&quot;,&quot;吃米饭&quot;]]
</code></pre>
<h2 id="需要将其转化为如下格式">需要将其转化为如下格式：</h2>
<pre><code class="language-python">new_info = [{&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:&quot;15&quot;,&quot;gender&quot;:&quot;男&quot;,&quot;food&quot;:&quot;吃零食&quot;},
            {&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:&quot;25&quot;,&quot;gender&quot;:&quot;女&quot;,&quot;food&quot;:&quot;吃烧烤&quot;},
            {&quot;name&quot;:&quot;王五&quot;,&quot;age&quot;:&quot;30&quot;,&quot;gender&quot;:&quot;男&quot;,&quot;food&quot;:&quot;吃米饭&quot;}]
</code></pre>
<hr>
<h1 id="代码设计思路">代码设计思路：</h1>
<ul>
<li>
<h3 id="通过下标提取第零个元素作为-key">通过下标提取第零个元素作为 key</h3>
</li>
<li>
<h3 id="用过下标提取之后所有的元素循环遍历作为-对应的-value">用过下标提取之后所有的元素循环遍历作为 对应的 value</h3>
</li>
<li>
<h3 id="通过-zip-进行对应行列转化">通过 zip() 进行对应行列转化</h3>
</li>
<li>
<h3 id="通过dict-将结果转化为字典格式">通过dict() 将结果转化为字典格式</h3>
</li>
<li>
<h3 id="使用空列表接收所有数据">使用空列表接收所有数据</h3>
</li>
</ul>
<hr>
<h2 id="代码实现">代码实现：</h2>
<pre><code class="language-python">
# 定义一个使用方法
def zip_use(user_info):
    # 先准备一个空列表
    res = []
    # 将需要的 key值根据下标提取出来
    title = user_info[0]
    # 将需要的 value值根据下标提取出来并循环遍历
    info = user_info[1:]
    
    for i in info:
        # 通过zip进行行列转化，并通过dict转化为字典格式
        new_res = dict(zip(title,i))
        # 每次循环完成，空列表添加一条数据
        res.append(new_res)
    # 返回循环结束后的列表
    return res

'''通过调用 zip_use 方法，打印结果'''
print(zip_use(user_info))

</code></pre>
<h2 id="打印结果">打印结果：</h2>
<pre><code class="language-python">C:\Users\86176\AppData\Local\Programs\Python\Python36\python.exe D:/PyCharm_Community/class/study/zip行列转化.py
[{'name': '张三', 'age': '15', 'gender': '男', 'food': '吃零食'}, {'name': '李四', 'age': '25', 'gender': '女', 'food': '吃烧烤'}, {'name': '王五', 'age': '30', 'gender': '男', 'food': '吃米饭'}]

Process finished with exit code 0

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python基础之 OS 模块的常见使用方法+ open() 配合使用]]></title>
        <id>https://17603845963.github.io/post/python-ji-chu-zhi-os-mo-kuai-de-chang-jian-shi-yong-fang-fa-open-pei-he-shi-yong/</id>
        <link href="https://17603845963.github.io/post/python-ji-chu-zhi-os-mo-kuai-de-chang-jian-shi-yong-fang-fa-open-pei-he-shi-yong/">
        </link>
        <updated>2020-09-03T11:46:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="os模块有许多方法让我们通过代码实现创建删除和更改目录">os模块有许多方法让我们通过代码实现创建，删除和更改目录</h1>
<h1 id="具体罗列如下">具体罗列如下：</h1>
<hr>
<hr>
<h2 id="一-osgetcwd">一、 os.getcwd():</h2>
<h3 id="getcwd-方法显示当前的工作路径只具体到路径不具体到文件">getcwd() 方法显示当前的工作路径，只具体到路径，不具体到文件。</h3>
<h3 id="实际过程中用得较少">【 实际过程中用得较少 】</h3>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200823114616493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="二-ospathrealpath_-_-file-_-_-用得非常多">二、os.path.realpath(_ _ <em>file</em> _ _)  用得非常多</h2>
<h3 id="显示文件的绝对路径">【 显示文件的绝对路径 】</h3>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200823115300279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="三-ospathdirnamefile">三、os.path.dirname(<strong>file</strong>)</h2>
<h3 id="显示文件所在文件夹的路径">显示文件所在文件夹的路径</h3>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200823115749941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="四-ospathjoin-a-b-路径拼接">四、os.path.join ( a , b ) 路径拼接</h2>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200823120613154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="五-osmkdir-绝对路径-创建指定路径的文件夹">五、os.mkdir ( 绝对路径 )：  创建指定路径的文件夹</h2>
<h2 id="注多级创建的时候前面必须要存在-一级级的创建">【 注：多级创建的时候前面必须要存在。一级—级的创建 】</h2>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200823121611679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="六-osrmdir-绝对路径-删除指定路径的文件夹">六、os.rmdir ( 绝对路径 ) ： 删除指定路径的文件夹</h2>
<h2 id="注多级删除的时候前面必须要存在一级级的删除">【 注：多级删除的时候前面必须要存在，一级—级的删除 】</h2>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200823122432975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="七-oslistdir-获取当前路径下的目录列表">七、os.listdir ( ) : 获取当前路径下的目录列表</h2>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200823123220449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="八-判断是否为文件文件夹">八、判断是否为文件\文件夹</h2>
<ul>
<li>
<h1 id="ospathisdir-判断当前文件是否是目录返回布尔值">os.path.isdir : 判断当前文件是否是目录,返回布尔值</h1>
</li>
<li>
<h1 id="ospathisfile-判断当前文件是否是文件返回布尔值">os.path.isfile : 判断当前文件是否是文件,返回布尔值</h1>
</li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200823123939238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h2 id="九-ospathexists-判断路径是否存在">九、os.path.exists ：判断路径是否存在</h2>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200823124620131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h1 id="os-模块-open-配合使用">OS 模块 +  open( )  配合使用</h1>
<pre><code class="language-python">import os

# 获取当前文件所在的文件夹路径
a = os.path.dirname(os.path.abspath(__file__))

# 将路径拼接文件名
b = os.path.join(a,'new.txt')

# 使用 open() 打开该路径的文件，读取方式为 utf-8
c = open(b,encoding='utf-8')

# 使用 read() 方法读取文件内容
print(c.read())

# 关闭文件
c.close()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python基础之 open ( ) 操作文件读写]]></title>
        <id>https://17603845963.github.io/post/python-ji-chu-zhi-open-cao-zuo-wen-jian-du-xie/</id>
        <link href="https://17603845963.github.io/post/python-ji-chu-zhi-open-cao-zuo-wen-jian-du-xie/">
        </link>
        <updated>2020-09-03T11:46:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="open文件路径编辑模式编码格式">open(文件路径，编辑模式，编码格式)</h1>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">open ( &lt;file.path&gt; ,mode='r',encoding='utf-8' )</td>
<td style="text-align:left">读取文件内容</td>
</tr>
<tr>
<td style="text-align:left">open ( &lt;file.path&gt; ,mode='w',encoding='utf-8' )</td>
<td style="text-align:left">覆盖写入内容</td>
</tr>
<tr>
<td style="text-align:left">open ( &lt;file.path&gt; ,mode='a',encoding='utf-8' )</td>
<td style="text-align:left">追加写入内容</td>
</tr>
<tr>
<td style="text-align:left">open ( &lt;file.path&gt; ,mode='r+',encoding='utf-8' )</td>
<td style="text-align:left">先读取再写入内容</td>
</tr>
<tr>
<td style="text-align:left">open ( &lt;file.path&gt; ,mode='w+',encoding='utf-8' )</td>
<td style="text-align:left">先写入内容再读取</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="一-显示文件内容">一、显示文件内容</h1>
<ul>
<li>
<h1 id="open-filepath-moderencodingutf-8">open ( &lt;file.path&gt; ,mode=‘r’,encoding=‘utf-8’ )</h1>
</li>
</ul>
<pre><code class="language-python">import os

# 获取当前文件所在的文件夹路径
a = os.path.dirname(os.path.abspath(__file__))

# 将路径拼接存在的文件名
b = os.path.join(a,'new.txt')

# 使用 open() 打开该路径的文件，读取方式为 utf-8
c = open(b,mode='r',encoding='utf-8')

# 使用 read() 方法读取文件内容
print(c.read())

# 关闭文件
c.close()
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200823161338807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h1 id="二-覆盖原文本内容并写入数据">二、覆盖原文本内容并写入数据</h1>
<ul>
<li>
<h1 id="open-filepath-modewencodingutf-8">open ( &lt;file.path&gt; ,mode='w',encoding='utf-8')</h1>
</li>
</ul>
<pre><code class="language-python">import os

# 获取当前文件所在的文件夹路径
a = os.path.dirname(os.path.abspath(__file__))

# 将路径拼接存在的文件名
b = os.path.join(a,'new.txt')

# 使用 open() 打开该路径的文件，读取方式为 utf-8
c = open(b,mode='w',encoding='utf-8')

# 使用 read() 方法读取文件内容
print(c.write(&quot;你是个好人，但我们不合适&quot;))

# 关闭文件
c.close()
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200823161755797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<h1 id="三-原文本的基础上追加写入数据">三、原文本的基础上追加写入数据</h1>
<ul>
<li>
<h1 id="open-filepath-modeaencodingutf-8">open ( &lt;file.path&gt; ,mode='a',encoding='utf-8')</h1>
</li>
</ul>
<pre><code class="language-python">import os

# 获取当前文件所在的文件夹路径
a = os.path.dirname(os.path.abspath(__file__))

# 将路径拼接存在的文件名
b = os.path.join(a,'new.txt')

# 使用 open() 打开该路径的文件，读取方式为 utf-8
c = open(b,mode='a',encoding='utf-8')

# 使用 read() 方法读取文件内容
print(c.write(&quot;\n别问，爱过，可以的话我们做朋友&quot;))

# 关闭文件
c.close()
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/202008231622317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jmeter+grafana+influxdb性能监控平台搭建]]></title>
        <id>https://17603845963.github.io/post/jmetergrafanainfluxdb-xing-neng-jian-kong-ping-tai-da-jian/</id>
        <link href="https://17603845963.github.io/post/jmetergrafanainfluxdb-xing-neng-jian-kong-ping-tai-da-jian/">
        </link>
        <updated>2020-09-03T11:45:13.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left">性能监控平台搭建</th>
<th style="text-align:left">参考文章</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Docker安装参考文档</td>
<td style="text-align:left"><a href="https://yeasy.gitbooks.io/docker_practice/content/install/">https://yeasy.gitbooks.io/docker_practice/content/install/</a></td>
</tr>
<tr>
<td style="text-align:left">Docker获取镜像</td>
<td style="text-align:left"><a href="https://yeasy.gitbooks.io/docker_practice/content/image/pull.html">  https://yeasy.gitbooks.io/docker_practice/content/image/pull.html </a></td>
</tr>
<tr>
<td style="text-align:left">Docker启动容器</td>
<td style="text-align:left"><a href="https://yeasy.gitbooks.io/docker_practice/content/container/run.html"> https://yeasy.gitbooks.io/docker_practice/content/container/run.html   </a></td>
</tr>
<tr>
<td style="text-align:left">Docker进入容器</td>
<td style="text-align:left"><a href="https://yeasy.gitbooks.io/docker_practice/content/container/attach_exec.html">  https://yeasy.gitbooks.io/docker_practice/content/container/attach_exec.html </a></td>
</tr>
</tbody>
</table>
<ul>
<li>
<h1 id="jmeter原生测试报告与监控平台的对比">jmeter原生测试报告与监控平台的对比</h1>
</li>
</ul>
<table>
<thead>
<tr>
<th>jmeter原生测试报告</th>
<th>性能监控平台</th>
</tr>
</thead>
<tbody>
<tr>
<td>不具备实时性</td>
<td>实时展示jmeter压测数据</td>
</tr>
<tr>
<td>报告中的数据是测试时间段内的平均值</td>
<td>数据范围可选</td>
</tr>
<tr>
<td>界面显示较丑</td>
<td>界面展示友好</td>
</tr>
</tbody>
</table>
<h1 id="性能监控平台组成">性能监控平台组成</h1>
<ul>
<li>JMeter：压测工具，产生压测数据</li>
<li>InfluxDB:开源时序数据库，特别适合用于处理和分析资源监控数据,用于存储压测数据</li>
<li>Grafana :度量分析与可视化图标展示工具,可以支持不用种类的<br>
数据源，用于将存储于InfluxDB中的数据以图表的形式展示出来</li>
</ul>
<h1 id="安装配置-influxdb">安装配置 InfluxDB</h1>
<p>① 安装 Docker</p>
<pre><code class="language-python">'''一、确认 Docker 安装是否成功'''
docker images
'''二、 查看是否有同名容器在运行：'''
docker ps -a
</code></pre>
<p>② 下载 influxDB 镜像：</p>
<pre><code class="language-python">docker pull influxdb
</code></pre>
<p>③ 启动 influxdb 容器<br>
④ 将新influxDB容器命名为jmeter_ influxdb, 执行docker创建容器命令</p>
<pre><code class="language-python">docker run -d -p 8086:8086 -p 8083:8083 --name=jmeterdb influxdb
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200808233838707.png" alt="在这里插入图片描述" loading="lazy"><br>
⑤ 执行如下命令进入容器内部</p>
<pre><code class="language-python">docker exec -it jmeterdb bash
</code></pre>
<p>⑥ 在容器内部创建jmeter数据库,用于收集JMeter发送的压测数据<br>
⑦ 执行influx命令进入命令台</p>
<pre><code class="language-python">influx
</code></pre>
<p>⑧ 执行类sq|语句创建jmeter数据库:</p>
<pre><code class="language-python">create database jmeter;
</code></pre>
<p>⑨ 创建完jmeter数据库之后执行如下命令验证数据库已经创建成功:</p>
<pre><code class="language-python">show databases;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200808232400969.png" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<h1 id="jmeter-配置">Jmeter 配置</h1>
<ol>
<li>
<p>在JMeter中添加Backend Listener组件,用于收集数据并发送给 influxdb<br>
<img src="https://img-blog.csdnimg.cn/20200808234804117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li>
<p>在 Backend Listener implementation 中选择 InfluxdbBackendListenerClient<br>
(注意:必须使用 jmeter 5.0 以上版本,否则需要单独装插件才可以看到这个组件)</p>
</li>
<li>
<p>在 influxdbURL 中将实际的 influxdb hostname 填写进去</p>
</li>
<li>
<p>在 application 中填写 order</p>
</li>
<li>
<p>在 measurement 中填写 jmeter</p>
</li>
<li>
<p>在 testTitle 中填写 Order Testing</p>
</li>
<li>
<p>其余配置保持不变<br>
<img src="https://img-blog.csdnimg.cn/20200809000137629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li>
<p>运行 JMeter  ,然后在 influxdb 中检验是否已经能够接受到数据</p>
<blockquote>
<p><strong>docker exec -it jmeterdb bash</strong><br>
<strong>influx</strong></p>
</blockquote>
</li>
<li>
<p>在 influxdb 命令台中使用查询语句, 检查是否已经能够收到数据</p>
<blockquote>
<p>use jmeter<br>
select * from jmeter<br>
<img src="https://img-blog.csdnimg.cn/20200809003533175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
</li>
</ol>
<hr>
<h1 id="grafana-配置">Grafana 配置</h1>
<p>【已下载过的无需重复下载，查看方式：docker images】<br>
一、下载镜像</p>
<blockquote>
<p>docker pull grafana/grafana</p>
</blockquote>
<p>二、启动镜像:</p>
<blockquote>
<p><strong>docker run -d -p 3000:3000 --name=jmeterGraf grafana/grafana</strong><br>
【如果启动后，外部浏览器无法访问，请关闭防火墙：systemctl stop firewalld】</p>
</blockquote>
<p>三、 外部浏览器访问 Grafana 首页</p>
<blockquote>
<p>&lt;本机 ip 地址&gt; : 3000</p>
</blockquote>
<ul>
<li>首页登录，默认登陆账号/密码：admin / admin</li>
<li>跳过修改密码 【也可以自行修改】</li>
<li>选择数据源</li>
<li>选择 InfluxDB<br>
<img src="https://img-blog.csdnimg.cn/20200809014746886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
<p>四、InfluxDB 配置</p>
<p><img src="https://img-blog.csdnimg.cn/2020080901350079.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200809015237255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="grafana的官方提供了很多社区或者官方设置的漂亮的dashboard地址如下">grafana的官方提供了很多社区或者官方设置的漂亮的dashboard，地址如下：</h2>
<h3 id="httpsgrafanacomgrafanadashboards"><a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a></h3>
<p><img src="https://img-blog.csdnimg.cn/20200809020731123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200809020831918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img-blog.csdnimg.cn/20200809021314956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200809021818882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020080902185087.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="再来讲讲性能监控平台三巨头的工作原理">再来讲讲性能监控平台三巨头的工作原理</h1>
<ul>
<li>
<h2 id="在-influxdb-启动完成之后">在 InfluxDB 启动完成之后；</h2>
</li>
<li>
<h2 id="配置-jmeter-的后端监听器把数据发送到-influxdb-上">配置 jmeter 的后端监听器，把数据发送到 InfluxDB 上；</h2>
</li>
<li>
<h2 id="然后配置-grafana-去读取-influxdb-的数据并展示成图形化界面">然后配置 Grafana 去读取 InfluxDB 的数据并展示成图形化界面</h2>
</li>
</ul>
<hr>
<hr>
<h1 id="整体流程演示重点来了">整体流程演示【重点来了！！！】：</h1>
<p>【修改一点小配置】</p>
<h3 id="1-配置-grafana-页面自动刷新时间">1. 配置 Grafana 页面自动刷新时间<img src="https://img-blog.csdnimg.cn/20200809023534846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h3>
<h3 id="2-调整请求并发数和执行时长演示就不放很大的线程数了">2. 调整请求并发数和执行时长【演示就不放很大的线程数了】</h3>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200809023902960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="3开始执行emmm-截图贴博客忘记设置5s页面自动刷新了问题不大">3.开始执行【emmm 截图贴博客忘记设置5s页面自动刷新了，问题不大】</h3>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200809024744360.gif" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用谷歌浏览器把网页保存为PNG图片]]></title>
        <id>https://17603845963.github.io/post/shi-yong-gu-ge-liu-lan-qi-ba-wang-ye-bao-cun-wei-png-tu-pian/</id>
        <link href="https://17603845963.github.io/post/shi-yong-gu-ge-liu-lan-qi-ba-wang-ye-bao-cun-wei-png-tu-pian/">
        </link>
        <updated>2020-09-03T11:44:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="chrome保存整个网页为图片">Chrome保存整个网页为图片</h1>
<h2 id="适合平时学习以及资料保存">【适合平时学习以及资料保存】</h2>
<hr>
<ul>
<li>
<h1 id="操作步骤">操作步骤：</h1>
<h2 id="1右键检查">1.右键检查</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200901104208742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="2快捷键ctrlshiftp">2.快捷键Ctrl+Shift+P</h2>
<h2 id="3输入full">3.输入full</h2>
<h2 id="4选择capture-full-size-screenshot">4.选择Capture full size screenshot</h2>
<p><img src="https://img-blog.csdnimg.cn/20200901104807998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200901104947277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql数据库concat（）函数实现字符串拼接]]></title>
        <id>https://17603845963.github.io/post/mysql-shu-ju-ku-concathan-shu-shi-xian-zi-fu-chuan-pin-jie/</id>
        <link href="https://17603845963.github.io/post/mysql-shu-ju-ku-concathan-shu-shi-xian-zi-fu-chuan-pin-jie/">
        </link>
        <updated>2020-09-03T11:44:02.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h1 id="concat语法">concat（）语法：</h1>
<blockquote>
<p><strong>CONCAT ( str1 , str2 , … )</strong></p>
</blockquote>
</li>
</ul>
<h3 id="返回结果">返回结果：</h3>
<ul>
<li>
<h4 id="返回结果为连接参数产生的字符串">返回结果为连接参数产生的字符串</h4>
</li>
<li>
<h4 id="如有任何一个参数为null-则返回值为-null">如有任何一个参数为NULL ，则返回值为 NULL</h4>
</li>
</ul>
<hr>
<hr>
<h1 id="1-如图现在需将password字段开头批量增加一位">1、如图，现在需将password字段开头批量增加一位</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200901184912831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="2-使用代码">2、使用代码：</h1>
<pre><code class="language-bash">update user_table set password = CONCAT('1', password) WHERE password LIKE '12345%'
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200901185516394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-运行成功查看结果">3、运行成功，查看结果</h1>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200901185811552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<hr>
<h1 id="功能拓展">功能拓展</h1>
<ul>
<li>
<h3 id="字符串前后拼接无限添加">字符串前后拼接【无限添加】</h3>
</li>
<li>
<h1 id="concata-password-b-cargs">concat（'a' ，'password'  ，'b' ，‘c’，*args ）</h1>
</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/2020090119203648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea+Github搭建属于自己的博客Page build warning解决方法]]></title>
        <id>https://17603845963.github.io/post/grideagithub-da-jian-shu-yu-zi-ji-de-bo-ke-page-build-warning-jie-jue-fang-fa/</id>
        <link href="https://17603845963.github.io/post/grideagithub-da-jian-shu-yu-zi-ji-de-bo-ke-page-build-warning-jie-jue-fang-fa/">
        </link>
        <updated>2020-09-03T11:43:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="可以先听一下我的解决办法后面我会说一种我没尝试过的方法">【可以先听一下我的解决办法，后面我会说一种我没尝试过的方法】</h1>
<hr>
<hr>
<hr>
<h2 id="我的解决方法就是">我的解决方法就是：</h2>
<ul>
<li>
<h1 id="1-删除github账户卸载gridea软件">1、删除Github账户+卸载Gridea软件</h1>
</li>
<li>
<h1 id="2-再重新来一遍哭了">2、再重新来一遍【哭了】</h1>
</li>
</ul>
<h2 id="这里还有一个坑我是粉碎文件而不是一步步卸载导致-gridea-软件重新安装失败最后查下来原因是-注册表没有处理干净">这里还有一个坑！！！我是粉碎文件而不是一步步卸载导致 Gridea 软件重新安装失败，最后查下来原因是： '' 注册表没有处理干净 ''</h2>
<h1 id="注册表清理工具wise-registry-cleaner">注册表清理工具：<a href="https://www.wisecleaner.com.cn/wise-registry-cleaner.html">Wise Registry Cleaner</a></h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200903144757204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="清理了之后就可以重装-gridea-了">清理了之后就可以重装 Gridea 了</h3>
<hr>
<hr>
<hr>
<h1 id="方法二猜测应该可行我可能做了多余的操作">方法二：猜测应该可行，我可能做了多余的操作</h1>
<ul>
<li>
<h1 id="1-直接卸载-gridea">1、直接卸载 Gridea</h1>
</li>
<li>
<h1 id="2-清理注册表信息配置">2、清理注册表信息配置</h1>
</li>
<li>
<h1 id="3-重新安装-gridea">3、重新安装 Gridea</h1>
</li>
<li>
<h1 id="4-git仓库-settings-github-pages">4、Git仓库 &gt; Settings &gt; GitHub Pages</h1>
</li>
<li>
<h1 id="5-清理浏览器缓存防止重定向">5、清理浏览器缓存防止重定向</h1>
</li>
<li>
<h1 id="6-重新打开并同步-gridea">6、重新打开并同步 Gridea</h1>
<img src="https://img-blog.csdnimg.cn/20200903152430744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020090315395611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pfX19fX1E=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
]]></content>
    </entry>
</feed>